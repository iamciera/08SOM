m.data$region <- ifelse(grepl("A", m.data$variable, ignore.case = T), "A.tip",
ifelse(grepl("B", m.data$variable, ignore.case = T), "B.middle", "C.base"))
m.data$tissue <- ifelse(grepl("other", m.data$variable, ignore.case = T), "rachis",
ifelse(grepl("mbr", m.data$variable, ignore.case = T), "margin", "base"))
p <- ggplot(m.data, aes(x=tissue, y=value, color = genotype))
p + geom_point(alpha=0.5, position="jitter", size=1) +
geom_boxplot(alpha=0.75, outlier.size=0) +
theme_bw() +
scale_colour_manual(values=c("#ef8a62", "#67a9cf")) +
facet_grid(region ~ .)
m.data$region <- ifelse(grepl("A", m.data$variable, ignore.case = T), "A.tip",
ifelse(grepl("B", m.data$variable, ignore.case = T), "B.middle", "C.base"))
m.data$tissue <- ifelse(grepl("other", m.data$variable, ignore.case = T), "rachis",
ifelse(grepl("mbr", m.data$variable, ignore.case = T), "margin", "base"))
head(m.data)
m.data
grepl("mbr", m.data$variable, ignore.case = T)
clusterNum(2)
clusterVis_geno(5)
y <- genesInClust_tf2(5)
y <- genesInClust_wt(5)
y <- genesInClust_intersect(5)
kable(y, format = "latex", booktabs = TRUE)
clusterNum(2)
z <- setdiff(w,y)
w <- genesInClust_tf2(2)
x <- genesInClust_wt(2)
y <- genesInClust_intersect(2)
z <- setdiff(w,y)
lenght(z)
length(z)
w
z <- setdiff(w$gene,y$gene)
length(z)
kable(z, format = "latex", booktabs = TRUE)
z <- setdiff(y$gene,w$gene)
length(z)
z <- setdiff(y$gene,w$gene)
length(z)
z <- setdiff(w$gene,y$gene)
length(z)
length(y)
y <- genesInClust_intersect(2)
length(y)
length(y$gene)
z <- setdiff(y$gene,w$gene)
length(yz$gene)
length(z$gene)
z
y <- genesInClust_intersect(2)
kable(y, format = "latex", booktabs = TRUE)
w <- genesInClust_tf2(2)
w$gene
head(w$gene)
z <- setdiff(y$ITAG,w$ITAG)
z
w$ITAG
setdiff(y$ITAG,w$ITAG)
z <- setdiff(w$ITAG,y$ITAG)
z
kable(z, format = "latex", booktabs = TRUE)
z <- setdiff(w,y)
kable(z, format = "latex", booktabs = TRUE)
dim(z)
kable(z, format = "latex", booktabs = TRUE)
y <- genesInClust_intersect(2)
kable(y, format = "latex", booktabs = TRUE)
z <- setdiff(w$ITAG,y$ITAG)
kable(z, format = "latex", booktabs = TRUE)
resultsTable <- merge(z,annotation,by = "ITAG", all.x=TRUE)
head(z)
as.data.frame(z)
colnames(z)[1]<- "ITAG"
names(z)[1]<- "ITAG"
resultsTable <- merge(z,annotation,by = "ITAG", all.x=TRUE)
head(z)
as.data.frame(z)
z <- as.data.frame(z)
names(z)[1]<- "ITAG"
head(z)
resultsTable <- merge(z,annotation,by = "ITAG", all.x=TRUE)
kable(resultsTable, format = "latex", booktabs = TRUE)
kable(x, format = "latex", booktabs = TRUE)
clusterGO(2)
kable(x, format = "latex", booktabs = TRUE)
z <- setdiff(x$ITAG,y$ITAG)
z <- as.data.frame(z)
names(z)[1]<- "ITAG"
head(z)
resultsTable <- merge(z,annotation,by = "ITAG", all.x=TRUE)
kable(resultsTable, format = "latex", booktabs = TRUE)
clusterNum(2)
dim(resultsTable)
z <- setdiff(w$ITAG,y$ITAG)
z <- as.data.frame(z)
names(z)[1]<- "ITAG"
head(z)
resultsTable <- merge(z,annotation,by = "ITAG", all.x=TRUE)
kable(resultsTable, format = "latex", booktabs = TRUE)
setwd("~/Dropbox/Research/LCMProject/06diffGeneExp/analysis/indvGenes")
gene1 <- "Solyc05g007870"
gene2 <- "Solyc10g080880"
gene3 <- "Solyc03g118740"
library(reshape2)
library(ggplot2)
library(plyr)
countData <- read.csv("../data/normalized_read_count.csv")
head(countData)
countData <- melt(countData)
head(countData)
colnames(countData) <- c("gene", "sample", "count")
head(countData)
#set genotype
countData$genotype <- ifelse(grepl("wt", countData$sample, ignore.case = T), "wt",
ifelse(grepl("tf2", countData$sample, ignore.case = T), "tf2", "unknown"))
#countData$genotype <- if(grepl("wt", countData$sample)) {
#  "wt"
#  } else {
"tf2"
#  }
#set type
countData$tissue <- ifelse(grepl("other", countData$sample, ignore.case = T), "other",
ifelse(grepl("mbr", countData$sample, ignore.case = T), "mbr", "unknown"))
head(countData)
#Set Region
countData$region <- ifelse(grepl("a", countData$sample, ignore.case = T), "A",
ifelse(grepl("c", countData$sample, ignore.case = T), "C", "B"))
```
##Plot Data
Subsetting for genes of interest.  This is specified at the start of the script.
```{r}
gene1Data <- subset(countData, grepl(gene1, countData$gene))
gene2Data <- subset(countData, grepl(gene2, countData$gene))
gene3Data <- subset(countData, grepl(gene3, countData$gene))
graphData <- rbind(gene1Data, gene2Data, gene3Data)
graphData$sample2  <- paste(graphData$region, graphData$tissue, sep= "")
```
##Summarize Data
```{r}
sumGraph <- ddply(graphData, c("gene", "sample2", "genotype"), summarise,
N    = length(count),
mean = mean(count),
sd   = sd(count),
se   = sd / sqrt(N) )
```
##Plot 1
This organizing the data to look at differences between genotype.
```{r}
ggplot(sumGraph, aes(sample2, mean, fill = genotype)) +
geom_bar(stat = "identity", position = "dodge") +
facet_grid(.~gene) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
theme(text = element_text(size=20),
axis.text.x = element_text(angle=90, vjust=1))
clusterVis_geno(2)
clusterGO(2)
![aother](images/img14.png)
library(VennDiagram)
library(ggplot2)
library(reshape)
library(kohonen)
library(goseq)
library(GO.db)
library(knitr)
geneLength <- read.csv("../../../07GO_enrichment/requisiteData/normalized_genes_length.csv")
cate <- read.table("../../../07GO_enrichment/requisiteData/melted.GOTable.txt",header=TRUE)
plot.data <- read.table("../data/ssom.data.analysis5d.txt",header=TRUE)
names(plot.data)
clusterVis <- function(clustNum){
sub_cluster <- subset(plot.data, ssom.unit.classif==clustNum)
sub_data <- sub_cluster[,c(1, 9:14)] # just the sample types
m.data <- melt(sub_data)
p <- ggplot(m.data, aes(x=variable, y=value, color = genotype))
p + geom_point(alpha=0.5,position="jitter", size=1) +
geom_boxplot(alpha=0.75, outlier.size=0) +
theme_bw()
}
clusterGO <- function(clustNum){
##GO Enrichment on the catergories
dev.off()
plot.new()
#we need to first get the data in the right format.
#First get the list of ITAG
#sub_cluster
sub_cluster <- subset(plot.data, ssom.unit.classif==clustNum)
itag.sc <- as.data.frame(sub_cluster$gene)
colnames(itag.sc)[1] <- "itag"
itag.sc$sc <- 1
#Since each orthologue between tf2 and wt are represented twice in this set, we have to keep only the unique ITAGs.
itag.sc <- unique(itag.sc) #Check. Should cut the list in half. # dim(itag.sc) before and after
#Merge all by itag
matrixGO <- merge(itag.sc, geneLength, by = "itag", all = TRUE)
matrixGO[is.na(matrixGO)] <- 0
pat <- matrixGO
#Now that we have the data in the right format we can proceed with GO enrichment.
genes = as.integer(pat[,"sc"])
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes,bias.data=pat$length)
GO.wall = goseq(pwf,gene2cat = cate)
head(GO.wall)
#This is going to correct for multiple testing.  You can specify the p-value cut-off of GO categories you are interested.
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
print(t) #this is for the knitr document
}
```
```{r}
clusterVis_line <- function(clustNum) {
sub_cluster <- subset(plot.data, ssom.unit.classif==clustNum)
sub_data <- sub_cluster[,c(1, 2, 9:14)] # just the sample types
sub_data <- melt(sub_data)
sub_data <- within(sub_data, lineGroup <- paste(genotype, gene,sep='.'))
ggplot(sub_data, aes(variable, value, group = lineGroup, color =  genotype )) +
geom_line(alpha = .1, (aes(color = factor(genotype)))) +
geom_point(alpha = .0)
}
```
```{r}
#Prereq annotation files for function
annotation1<- read.delim("../../../06diffGeneExp/analysis/data/ITAG2.3_all_Arabidopsis_ITAG_annotations.tsv", header=FALSE)  #Changed to the SGN human readable annotation
colnames(annotation1) <- c("ITAG", "SGN_annotation")
annotation2<- read.delim ("../../../06diffGeneExp/analysis/data/ITAG2.3_all_Arabidopsis_annotated.tsv")
annotation <- merge(annotation1,annotation2, by = "ITAG")
#Only Gene Name and ITAG
annotation <- annotation[,c(1,5)]
```
Function
```{r}
genesInClust <- function(clustNum) {
sub_cluster <- subset(plot.data, ssom.unit.classif==clustNum)
sub_data <- as.data.frame(sub_cluster[,2])
colnames(sub_data) <- "ITAG"
resultsTable <- merge(sub_data,annotation,by = "ITAG", all.x=TRUE)
print(nrow(resultsTable))
#  return(resultsTable <- unique(resultsTable))
return(unique(resultsTable))
}
genesInClust <- function(clustNum, plot.data, annotation) {
sub_cluster <- subset(plot.data, ssom.unit.classif==clustNum)
sub_data <- as.data.frame(sub_cluster[,2])
colnames(sub_data) <- "ITAG"
resultsTable <- merge(sub_data,annotation,by = "ITAG", all.x=TRUE)
print(nrow(unique(resultsTable)))
return(unique(resultsTable))
}
clusterVis_PCA <- function(clustNum) {
#make dataset for visualization
data.val3 <- plot.data
names(data.val3)
data.val3$cluster[data.val3[,21] == clustNum] <- "subcluster"
data.val3$cluster[data.val3[,21] != clustNum] <- "other"
#plot
p <- ggplot(data.val3, aes(PC1, PC2, color = cluster))
p + geom_point(size=I(2), alpha = 0.6) +
scale_colour_manual(values=c("#cccccc", "#000000")) +
theme_bw() +
theme(legend.text = element_text(
size = 16,
face = "bold")) +
facet_grid(. ~ genotype)
}
clusterVis_PCAsub <- function(clustNum) {
#make dataset for visualization
plot.data <- subset(plot.data, ssom.unit.classif==clustNum)
data.val3 <- plot.data
#plot
p <- ggplot(data.val3, aes(PC1, PC2, color = genotype))
p + geom_point(size=I(2), alpha = 0.6) +
scale_colour_manual(values=c("#ef8a62", "#67a9cf")) +
theme_bw() +
theme(legend.text = element_text(
size = 16,
face = "bold"))
}
```
```{r}
#Prereq annotation files for function
annotation1<- read.delim("../../../06diffGeneExp/analysis/data/ITAG2.3_all_Arabidopsis_ITAG_annotations.tsv", header=FALSE)  #Changed to the SGN human readable annotation
colnames(annotation1) <- c("ITAG", "SGN_annotation")
annotation2<- read.delim ("../../../06diffGeneExp/analysis/data/ITAG2.3_all_Arabidopsis_annotated.tsv")
annotation <- merge(annotation1,annotation2, by = "ITAG")
#Only Gene Name and ITAG
annotation <- annotation[,c(1,3,5)]
###genesInClust()
#This looks at how many unique genes are in each cluster.
genesInClust <- function(clustNum) {
sub_cluster <- subset(plot.data, som$unit.classif==clustNum)
sub_data <- as.data.frame(sub_cluster[,2])
colnames(sub_data) <- "ITAG"
resultsTable <- merge(sub_data,annotation,by = "ITAG", all.x=TRUE)
print(nrow(unique(resultsTable)))
return(unique(resultsTable))
}
```
clusterVis(1)
clusterVis_PCA(1)
clusterVis_PCAsub(1)
clusterVis_line(1)
plot.data <- read.table("../data/ssom.data.analysis5d.txt",header=TRUE)
names(plot.data)
clusterVis(36)
names(plot.data)
plot.data <- read.table("../data/ssom.data.analysis5d.txt",header=TRUE)
setwd("~/Dropbox/Research/LCMProject/08SOM/lcmSOM/r")
plot.data <- read.table("../data/ssom.data.analysis5d.txt",header=TRUE)
names(plot.data)
clusterVis(1)
clusterVis_PCA(1)
clusterVis_PCAsub(1)
![cell differentiation](images/img7.png)
![cell differentiation](images/img6.png)
genes25 <- read.csv("../data/analysis4.top25.csv")
genes25 <- genes25[,c(2,9:14)]
scale_data <- as.matrix(t(scale(t(genes25[c(2:7)]))))
pca <- prcomp(scale_data, scale=TRUE)
pca.scores <- data.frame(pca$x)
summary(pca)
clusterVis(10)
clusterVis_PCA(10)
clusterVis_PCAsub(10)
clusterVis_line(10)
y <- genesInClust(10)
clusterVis(4)
clusterVis_PCA(4)
clusterVis_PCAsub(4)
clusterVis_line(4)
y <- genesInClust(4)
kable(y, format = "latex", booktabs = TRUE)
clusterVis_PCA(4)
clusterVis_PCA(4)
clusterVis(4)
clusterVis_PCA(4)
clusterVis(3)
clusterVis_PCA(3)
clusterVis_PCAsub(3)
clusterVis_line(3)
y <- genesInClust(3)
kable(y, format = "latex", booktabs = TRUE)
clusterVis_PCA(3)
clusterVis(3)
clusterVis(4)
y <- genesInClust(4)
kable(y, format = "latex", booktabs = TRUE)
clusterVis(12)
clusterVis_PCA(12)
clusterVis_PCAsub(12)
clusterVis_line(12)
y <- genesInClust(12)
kable(y, format = "latex", booktabs = TRUE)
clusterVis(12)
plot.data <- read.table("../data/ssom.data.analysis5d.txt",header=TRUE)
plot.data <- read.table("../data/ssom.data.analysis5d.txt",header=TRUE)
names(plot.data)
#clusterVis Function
#displays transformed data in a box plot
clusterVis <- function(clustNum){
sub_cluster <- subset(plot.data, ssom.unit.classif==clustNum)
sub_data <- sub_cluster[,c(1, 9:14)] # just the sample types
m.data <- melt(sub_data)
p <- ggplot(m.data, aes(x=variable, y=value, color = genotype))
p + geom_point(alpha=0.5,position="jitter", size=1) +
geom_boxplot(alpha=0.75, outlier.size=0) +
theme_bw()
clusterVis_line <- function(clustNum) {
sub_cluster <- subset(plot.data, ssom.unit.classif==clustNum)
sub_data <- sub_cluster[,c(1, 2, 9:14)] # just the sample types
sub_data <- melt(sub_data)
sub_data <- within(sub_data, lineGroup <- paste(genotype, gene,sep='.'))
ggplot(sub_data, aes(variable, value, group = lineGroup, color =  genotype )) +
geom_line(alpha = .1, (aes(color = factor(genotype)))) +
geom_point(alpha = .0)
}
genesInClust <- function(clustNum) {
sub_cluster <- subset(plot.data, ssom.unit.classif==clustNum)
sub_data <- as.data.frame(sub_cluster[,2])
colnames(sub_data) <- "ITAG"
resultsTable <- merge(sub_data,annotation,by = "ITAG", all.x=TRUE)
print(nrow(resultsTable))
#  return(resultsTable <- unique(resultsTable))
return(unique(resultsTable))
}
genesInClust <- function(clustNum, plot.data, annotation) {
sub_cluster <- subset(plot.data, ssom.unit.classif==clustNum)
sub_data <- as.data.frame(sub_cluster[,2])
colnames(sub_data) <- "ITAG"
resultsTable <- merge(sub_data,annotation,by = "ITAG", all.x=TRUE)
print(nrow(unique(resultsTable)))
return(unique(resultsTable))
}
clusterVis_PCA <- function(clustNum) {
#make dataset for visualization
data.val3 <- plot.data
names(data.val3)
data.val3$cluster[data.val3[,21] == clustNum] <- "subcluster"
data.val3$cluster[data.val3[,21] != clustNum] <- "other"
#plot
p <- ggplot(data.val3, aes(PC1, PC2, color = cluster))
p + geom_point(size=I(2), alpha = 0.6) +
scale_colour_manual(values=c("#cccccc", "#000000")) +
theme_bw() +
theme(legend.text = element_text(
size = 16,
face = "bold")) +
facet_grid(. ~ genotype)
}
clusterVis_PCAsub <- function(clustNum) {
#make dataset for visualization
plot.data <- subset(plot.data, ssom.unit.classif==clustNum)
data.val3 <- plot.data
#plot
p <- ggplot(data.val3, aes(PC1, PC2, color = genotype))
p + geom_point(size=I(2), alpha = 0.6) +
scale_colour_manual(values=c("#ef8a62", "#67a9cf")) +
theme_bw() +
theme(legend.text = element_text(
size = 16,
face = "bold"))
}
plot.data <- read.table("../data/ssom.data.analysis5d.txt",header=TRUE)
names(plot.data)
#clusterVis Function
#displays transformed data in a box plot
clusterVis <- function(clustNum){
sub_cluster <- subset(plot.data, ssom.unit.classif==clustNum)
sub_data <- sub_cluster[,c(1, 9:14)] # just the sample types
m.data <- melt(sub_data)
p <- ggplot(m.data, aes(x=variable, y=value, color = genotype))
p + geom_point(alpha=0.5,position="jitter", size=1) +
geom_boxplot(alpha=0.75, outlier.size=0) +
theme_bw()
clusterVis_line <- function(clustNum) {
sub_cluster <- subset(plot.data, ssom.unit.classif==clustNum)
sub_data <- sub_cluster[,c(1, 2, 9:14)] # just the sample types
sub_data <- melt(sub_data)
sub_data <- within(sub_data, lineGroup <- paste(genotype, gene,sep='.'))
ggplot(sub_data, aes(variable, value, group = lineGroup, color =  genotype )) +
geom_line(alpha = .1, (aes(color = factor(genotype)))) +
geom_point(alpha = .0)
}
genesInClust <- function(clustNum) {
sub_cluster <- subset(plot.data, ssom.unit.classif==clustNum)
sub_data <- as.data.frame(sub_cluster[,2])
colnames(sub_data) <- "ITAG"
resultsTable <- merge(sub_data,annotation,by = "ITAG", all.x=TRUE)
print(nrow(resultsTable))
#  return(resultsTable <- unique(resultsTable))
return(unique(resultsTable))
}
genesInClust <- function(clustNum, plot.data, annotation) {
sub_cluster <- subset(plot.data, ssom.unit.classif==clustNum)
sub_data <- as.data.frame(sub_cluster[,2])
colnames(sub_data) <- "ITAG"
resultsTable <- merge(sub_data,annotation,by = "ITAG", all.x=TRUE)
print(nrow(unique(resultsTable)))
return(unique(resultsTable))
}
clusterVis_PCA <- function(clustNum) {
#make dataset for visualization
data.val3 <- plot.data
names(data.val3)
data.val3$cluster[data.val3[,21] == clustNum] <- "subcluster"
data.val3$cluster[data.val3[,21] != clustNum] <- "other"
#plot
p <- ggplot(data.val3, aes(PC1, PC2, color = cluster))
p + geom_point(size=I(2), alpha = 0.6) +
scale_colour_manual(values=c("#cccccc", "#000000")) +
theme_bw() +
theme(legend.text = element_text(
size = 16,
face = "bold")) +
facet_grid(. ~ genotype)
}
clusterVis_PCAsub <- function(clustNum) {
#make dataset for visualization
plot.data <- subset(plot.data, ssom.unit.classif==clustNum)
data.val3 <- plot.data
#plot
p <- ggplot(data.val3, aes(PC1, PC2, color = genotype))
p + geom_point(size=I(2), alpha = 0.6) +
scale_colour_manual(values=c("#ef8a62", "#67a9cf")) +
theme_bw() +
theme(legend.text = element_text(
size = 16,
face = "bold"))
}
}
HIH
q
}
plot.data <- read.table("../data/ssom.data.analysis5d.txt",header=TRUE)
plot.data <- read.table("../data/ssom.data.analysis5d.txt",header=TRUE)
names(plot.data)
y <- genesInClust(11)
clusterVis_PCA(12)
clusterVis_PCAsub(12)
clusterVis(28)
clusterVis_PCA(28)
clusterVis_PCAsub(28)
clusterVis_line(28)
clusterVis(28)
clusterVis_PCA(28)
y <- genesInClust(29)
y <- genesInClust(28)
kable(y, format = "latex", booktabs = TRUE)
