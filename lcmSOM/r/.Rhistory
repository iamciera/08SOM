dim(plot.data)
p <- ggplot(plot.data, aes(PC1, PC2, colour=factor(som_cluster))) #notice I am using som_cluster and not unit.classif, because this is the larger SOM
p + geom_point() + theme_bw()
mostDEgenes <- read.csv("../data/allGeneListBothGenotypes_analysis5.csv")
head(mostDEgenes)
mostDEgenes <- mostDEgenes[c(7, 2, 1, 4)] #keep only needed columns (gene, genotype, type, mean)
head(mostDEgenes)
mostDEgenes<- subset(mostDEgenes, genotype == "tf2")
mostDEgene.long <- cast(mostDEgenes, genotype + gene ~ type, value.var = mean, fun.aggregate = "mean")  #why did I have to specify "mean" here? Are there duplicates of types? Double check later.
head(mostDEgene.long)
mostDEgene.long <- as.data.frame(mostDEgene.long) #transformation.
names(mostDEgene.long)
scale_data <- as.matrix(t(scale(t(mostDEgene.long[c(3:8)]))))
head(scale_data)
pca <- prcomp(scale_data, scale=TRUE)
pca <- prcomp(scale_data, scale=TRUE)
summary(pca)
data.val <- cbind(mostDEgene.long, scale_data, pca.scores)
head(data.val)
mostDEgenes <- read.csv("../data/allGeneListBothGenotypes_analysis5.csv")
head(mostDEgenes)
write.table(allGeneList, file = "../data/allGeneListBothGenotypes_analysis5.csv", sep = ",")
mostDEgenes <- read.csv("../data/allGeneListBothGenotypes_analysis5.csv")
head(mostDEgenes)
mostDEgenes <- mostDEgenes[c(7, 2, 1, 4)] #keep only needed columns (gene, genotype, type, mean)
head(mostDEgenes)
mostDEgenes<- subset(mostDEgenes, genotype == "tf2")
mostDEgene.long <- cast(mostDEgenes, genotype + gene ~ type, value.var = mean, fun.aggregate = "mean")  #why did I have to specify "mean" here? Are there duplicates of types? Double check later.
head(mostDEgene.long)
mostDEgene.long <- as.data.frame(mostDEgene.long)
names(mostDEgene.long)
scale_data <- as.matrix(t(scale(t(mostDEgene.long[c(3:8)]))))#transformation.
head(scale_data)
pca <- prcomp(scale_data, scale=TRUE)
summary(pca)
pca.scores <- data.frame(pca$x)
data.val <- cbind(mostDEgene.long, scale_data, pca.scores)
head(data.val)
mostDEgene.long <- cast(mostDEgenes, gene ~ type, value.var = mean, fun.aggregate = "mean")  #why did I have to specify "mean" here? Are there duplicates of types? Double check later.
head(mostDEgenes)
mostDEgene.long <- as.data.frame(mostDEgene.long) #transformation.
scale_data <- as.matrix(t(scale(t(mostDEgene.long[c(2:7)]))))
pca <- prcomp(scale_data, scale=TRUE)
library(ggplot2)
library(reshape)
library(kohonen)
mostDEgenes <- read.csv("../data/allGeneListBothGenotypes_analysis5.csv")
head(mostDEgenes)
mostDEgenes <- mostDEgenes[c(7, 2, 1, 4)] #keep only needed columns (gene, genotype, type, mean)
head(mostDEgenes)
mostDEgenes<- subset(mostDEgenes, genotype == "tf2")
mostDEgene.long <- cast(mostDEgenes, genotype + gene ~ type, value.var = mean, fun.aggregate = "mean")  #why did I have to specify "mean" here? Are there duplicates of types? Double check later.
head(mostDEgene.long)
mostDEgene.long <- as.data.frame(mostDEgene.long)
names(mostDEgene.long)
scale_data <- as.matrix(t(scale(t(mostDEgene.long[c(3:8)]))))#transformation.
head(scale_data)
pca <- prcomp(scale_data, scale=TRUE)
summary(pca)
pca.scores <- data.frame(pca$x)
data.val <- cbind(mostDEgene.long, scale_data, pca.scores)
head(data.val)
p <- ggplot(data.val, aes(PC1, PC2))
p + geom_point()
names(data.val)
som.data <- as.matrix(data.val[,c(9:14)])  #subset only the scaled gene expression values
set.seed(2)
som <- som(data=som.data, somgrid(6,6,"hexagonal")) # This is where you change the size of the map
summary(som)
set.seed(5)
som <- som(data=som.data, somgrid(6,6,"hexagonal")) # This is where you change the size of the map
summary(som)
plot(som, type ="changes")
plot(som, type = "codes")
plot(som, type = "counts")
som <- som(data=som.data, somgrid(8,8,"hexagonal")) # This is where you change the size of the map
summary(som)
plot(som, type ="changes")
plot(som, type ="changes")
plot(som, type = "codes")
plot(som, type = "counts")
plot(som, type="dist.neighbours")
head(som$codes)
som$data <- data.frame(som$data) #changed to dataframe to extract column names easier.
for (i in 1:6){
plot(som, type = "property", property = som$codes[,i], main=names(som$data)[i])
print(plot)
}
mydata <- som$codes
head(mydata)
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 1:8) {
wss[i] <- sum(kmeans(mydata, centers=i)$withinss)
}
plot(wss)
som_cluster <- cutree(hclust(dist(som$codes)), 6)
plot(som, type="mapping", bgcol = som_cluster, main = "Clusters")
add.cluster.boundaries(som, som_cluster)
som_clusterKey <- data.frame(som_cluster)
som_clusterKey$unit.classif <- c(1:36)
data.val <- cbind(data.val,som$unit.classif,som$distances)
names(data.val)[20] <- "unit.classif"
data.val <- merge(data.val, som_clusterKey, by.x = "unit.classif" ) #ignore warning, this is what you want.  You are essentially filling in the empties with the value from som_clusterKey
names(data.val)[20]
data.val <- cbind(data.val,som$unit.classif,som$distances)
names(data.val)[20]
data.val <- merge(data.val, som_clusterKey, by.x = "unit.classif" ) #ignore warning, this is what you want.  You are essentially filling in the empties with the value from som_clusterKey
som_clusterKey$unit.classif
som_cluster
som_clusterKey$unit.classif <- c(1:65)
som_clusterKey$unit.classif <- c(1:64)
data.val <- cbind(data.val,som$unit.classif,som$distances)
names(data.val)[20] <- "unit.classif"
data.val <- merge(data.val, som_clusterKey, by.x = "unit.classif" ) #ignore warning, this is what you want.  You are essentially filling in the empties with the value from som_clusterKey
som <- som(data=som.data, somgrid(6,6,"hexagonal")) # This is where you change the size of the map
summary(som)
plot(som, type ="changes")
plot(som, type = "codes")
plot(som, type = "counts")
plot(som, type="dist.neighbours")
head(som$codes)
som$data <- data.frame(som$data) #changed to dataframe to extract column names easier.
for (i in 1:6){
plot(som, type = "property", property = som$codes[,i], main=names(som$data)[i])
print(plot)
}
mydata <- som$codes
head(mydata)
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 1:8) {
wss[i] <- sum(kmeans(mydata, centers=i)$withinss)
}
plot(wss)
som_cluster <- cutree(hclust(dist(som$codes)), 6)
plot(som, type="mapping", bgcol = som_cluster, main = "Clusters")
add.cluster.boundaries(som, som_cluster)
som_clusterKey <- data.frame(som_cluster)
som_clusterKey$unit.classif <- c(1:36)
mostDEgenes <- read.csv("../data/allGeneListBothGenotypes_analysis5.csv")
head(mostDEgenes)
mostDEgenes <- mostDEgenes[c(7, 2, 1, 4)] #keep only needed columns (gene, genotype, type, mean)
head(mostDEgenes)
mostDEgene.long <- cast(mostDEgenes, genotype + gene ~ type, value.var = mean, fun.aggregate = "mean")  #why did I have to specify "mean" here? Are there duplicates of types? Double check later.
head(mostDEgene.long)
mostDEgene.long <- as.data.frame(mostDEgene.long) #transformation.
names(mostDEgene.long)
scale_data <- as.matrix(t(scale(t(mostDEgene.long[c(3:8)]))))
head(scale_data)
pca <- prcomp(scale_data, scale=TRUE)
summary(pca)
pca.scores <- data.frame(pca$x)
data.val <- cbind(mostDEgene.long, scale_data, pca.scores)
head(data.val)
p <- ggplot(data.val, aes(PC1, PC2))
p + geom_point()
set.seed(6)
names(data.val)
superSomData <- data.val[,c(1:2,9:14)]
tf2 <- subset(superSomData, genotype == "tf2", select = 3:8)
wt <- subset(superSomData, genotype == "wt", select = 3:8)
colnames(tf2) <- c("tf2Ambr", "tf2Aother", "tf2Bmbr", "tf2Bother", "tf2Cmbr", "tf2Cother")
colnames(wt) <- c("wtAmbr", "wtAother", "wtBmbr", "wtBother", "wtCmbr", "wtCother")
wt <- as.matrix(wt)
tf2 <- as.matrix(tf2)
all.data <- list(wt,tf2)
ssom <- supersom(all.data, somgrid(7, 7, "hexagonal"),weights=c(0.5,0.5))
summary(ssom)
par(mfrow = c(3, 2))
plot(ssom, type ="changes")
plot(ssom, type = "codes")
plot(ssom, type = "counts")
plot(ssom, type = "quality")
data.val <- cbind(data.val,tf2,wt,ssom$unit.classif,ssom$distances)
head(data.val)
write.table(data.val, file="../data/ssom.data.analysis5.txt")
plot.data <- read.table("../data/ssom.data.analysis5.txt",header=TRUE)
names(plot.data)
dim(plot.data)
p <- ggplot(plot.data, aes(PC1, PC2, colour=factor(ssom.unit.classif))) #notice I am using som_cluster and not unit.classif, because this is the larger SOM
p + geom_point() + theme_bw()
som_cluster <- cutree(hclust(dist(som$codes)), 5)
som_cluster <- cutree(hclust(dist(som$codes)), 5)
som_cluster <- cutree(hclust(dist(ssom$codes)), 5)
superSomData <- cbind(genotype, superSomData)
superSomData.long <- as.data.frame(superSomData)
scale_data <- as.matrix(t(scale(t(superSomData.long[c(1:6)])))) #transformation.
genotype <- data.val$genotype
superSomData <- cbind(genotype, superSomData)
superSomData.long <- as.data.frame(superSomData)
scale_data <- as.matrix(t(scale(t(superSomData.long[c(1:6)])))) #transformation.
set.seed(6)
names(data.val)
superSomData <- data.val[,c(1:2,9:14)]
tf2 <- subset(superSomData, genotype == "tf2", select = 3:8)
wt <- subset(superSomData, genotype == "wt", select = 3:8)
colnames(tf2) <- c("tf2Ambr", "tf2Aother", "tf2Bmbr", "tf2Bother", "tf2Cmbr", "tf2Cother")
colnames(wt) <- c("wtAmbr", "wtAother", "wtBmbr", "wtBother", "wtCmbr", "wtCother")
wt <- as.matrix(wt)
tf2 <- as.matrix(tf2)
all.data <- list(wt,tf2)
head(all.data)
wt
all.data <- list(wt,tf2)
ssom <- supersom(all.data, somgrid(7, 7, "hexagonal"),weights=c(0.5,0.5))
summary(ssom)
par(mfrow = c(3, 2))
plot(ssom, type ="changes")
plot(ssom, type = "codes")
plot(ssom, type = "counts")
plot(ssom, type = "quality")
data.val <- cbind(data.val,tf2,wt,ssom$unit.classif,ssom$distances)
head(data.val)
som_cluster <- cutree(hclust(dist(ssom$codes)), 5)
ssom <- supersom(all.data, somgrid(6, 2, "hexagonal"),weights=c(0.5,0.5))
summary(ssom)
par(mfrow = c(3, 2))
plot(ssom, type ="changes")
plot(ssom, type = "codes")
plot(ssom, type = "counts")
ssom <- supersom(all.data, somgrid(3, 2, "hexagonal"),weights=c(0.5,0.5))
summary(ssom)
par(mfrow = c(3, 2))
plot(ssom, type ="changes")
plot(ssom, type = "codes")
plot(ssom, type = "counts")
plot(ssom, type = "quality")
plot(ssom, type = "counts")
plot(ssom, type = "quality")
data.val <- cbind(data.val,tf2,wt,ssom$unit.classif,ssom$distances)
head(data.val)
write.table(data.val, file="../data/ssom.data.analysis5.txt")
plot.data <- read.table("../data/ssom.data.analysis5.txt",header=TRUE)
names(plot.data)
dim(plot.data)
p <- ggplot(plot.data, aes(PC1, PC2, colour=factor(ssom.unit.classif))) #notice I am using som_cluster and not unit.classif, because this is the larger SOM
p + geom_point() + theme_bw()
head(data.val)
write.table(data.val, file="../data/ssom.data.analysis5.txt")
plot.data <- read.table("../data/ssom.data.analysis5.txt",header=TRUE)
names(plot.data)
mostDEgenes <- read.csv("../data/allGeneListBothGenotypes_analysis5.csv")
head(mostDEgenes)
mostDEgenes <- mostDEgenes[c(7, 2, 1, 4)] #keep only needed columns (gene, genotype, type, mean)
head(mostDEgenes)
#Change from long to wide data format
mostDEgene.long <- cast(mostDEgenes, genotype + gene ~ type, value.var = mean, fun.aggregate = "mean")  #why did I have to specify "mean" here? Are there duplicates of types? Double check later.
head(mostDEgene.long)
mostDEgene.long <- as.data.frame(mostDEgene.long) #transformation.
names(mostDEgene.long)
scale_data <- as.matrix(t(scale(t(mostDEgene.long[c(3:8)]))))
head(scale_data)
#Principle Component Analysis
pca <- prcomp(scale_data, scale=TRUE)
summary(pca)
pca.scores <- data.frame(pca$x)
data.val <- cbind(mostDEgene.long, scale_data, pca.scores)
head(data.val)
p <- ggplot(data.val, aes(PC1, PC2))
p + geom_point()
set.seed(6)
names(data.val)
superSomData <- data.val[,c(1:2,9:14)]
tf2 <- subset(superSomData, genotype == "tf2", select = 3:8)
wt <- subset(superSomData, genotype == "wt", select = 3:8)
colnames(tf2) <- c("tf2Ambr", "tf2Aother", "tf2Bmbr", "tf2Bother", "tf2Cmbr", "tf2Cother")
colnames(wt) <- c("wtAmbr", "wtAother", "wtBmbr", "wtBother", "wtCmbr", "wtCother")
wt <- as.matrix(wt)
tf2 <- as.matrix(tf2)
all.data <- list(wt,tf2)
ssom <- supersom(all.data, somgrid(3, 2, "hexagonal"),weights=c(0.5,0.5))
summary(ssom)
par(mfrow = c(3, 2))
plot(ssom, type ="changes")
plot(ssom, type = "codes")
plot(ssom, type = "counts")
plot(ssom, type = "quality")
data.val <- cbind(data.val,tf2,wt,ssom$unit.classif,ssom$distances)
head(data.val)
write.table(data.val, file="../data/ssom.data.analysis5.txt")
plot.data <- read.table("../data/ssom.data.analysis5.txt",header=TRUE)
names(plot.data)
dim(plot.data)
p <- ggplot(plot.data, aes(PC1, PC2, colour=factor(ssom.unit.classif))) #notice I am using som_cluster and not unit.classif, because this is the larger SOM
p + geom_point() + theme_bw()
p + geom_point()
set.seed(6)
names(data.val)
superSomData <- data.val[,c(1:2,9:14)]
library(ggplot2)
library(reshape)
library(kohonen)
setwd("~/Dropbox/Research/LCMProject/08SOM/lcmSOM/r")
mostDEgenes <- read.csv("../data/allGeneList.csv")
head(mostDEgenes)
mostDEgenes <- mostDEgenes[c(7, 1, 4)] #keep only needed columns (gene, type, mean)
countData <- read.csv("../data/normalized_read_count.csv")
#Melt count data
countData <- melt(countData)
colnames(countData) <- c("gene", "sample", "count")
countData$genotype <- ifelse(grepl("wt", countData$sample, ignore.case = T), "wt",
ifelse(grepl("tf2", countData$sample, ignore.case = T), "tf2", "unknown"))
countData$tissue <- ifelse(grepl("other", countData$sample, ignore.case = T), "other",
ifelse(grepl("mbr", countData$sample, ignore.case = T), "mbr", "unknown"))
#Set Region
countData$region <- ifelse(grepl("a", countData$sample, ignore.case = T), "A",
ifelse(grepl("c", countData$sample, ignore.case = T), "C", "B"))
countData$type <- paste(countData$region, countData$tissue,  sep = "")
head(countData)
countData <- subset(countData, genotype == "tf2")
tf2aother_tf2cother  <- read.table("../data/allSigGenes/tf2aother_tf2cother_DE_sig.txt", header = TRUE, fill = TRUE)
tf2ambr_tf2aother <- read.table("../data/allSigGenes/tf2ambr_tf2aother_DE_sig.txt", header = TRUE, fill = TRUE)
tf2ambr_tf2bmbr <- read.table("../data/allSigGenes/tf2ambr_tf2bmbr_DE_sig.txt", header = TRUE, fill = TRUE)
tf2ambr_tf2cmbr <- read.table("../data/allSigGenes/tf2ambr_tf2cmbr_DE_sig.txt", header = TRUE, fill = TRUE)
tf2aother_tf2bother <- read.table("../data/allSigGenes/tf2aother_tf2bother_DE_sig.txt", header = TRUE, fill = TRUE)
tf2bmbr_tf2bother <- read.table("../data/allSigGenes/tf2bmbr_tf2bother_DE_sig.txt", header = TRUE, fill = TRUE)
tf2bmbr_tf2cmbr <- read.table("../data/allSigGenes/tf2bmbr_tf2cmbr_DE_sig.txt", header = TRUE, fill = TRUE)
tf2bother_tf2cother <- read.table("../data/allSigGenes/tf2bother_tf2cother_DE_sig.txt", header = TRUE, fill = TRUE)
tf2cmbr_tf2cother <- read.table("../data/allSigGenes/tf2cmbr_tf2cother_DE_sig.txt", header = TRUE, fill = TRUE)
allGenes <- rbind(tf2aother_tf2cother, tf2ambr_tf2aother, tf2ambr_tf2bmbr, tf2ambr_tf2cmbr, tf2aother_tf2bother,tf2bmbr_tf2cmbr,tf2bother_tf2cother,tf2cmbr_tf2cother)
dim(allGenes)
head(allGenes)
allGenes <- rbind(tf2aother_tf2cother, tf2ambr_tf2aother, tf2ambr_tf2bmbr, tf2ambr_tf2cmbr, tf2aother_tf2bother,tf2bmbr_tf2cmbr,tf2bother_tf2cother,tf2cmbr_tf2cother)
tf2aother_tf2cother  <- read.table("../data/allSigGenes/tf2aother_tf2cother_DE_sig.txt", header = TRUE, fill = TRUE)
tf2ambr_tf2aother <- read.table("../data/allSigGenes/tf2ambr_tf2aother_DE_sig.txt", header = TRUE, fill = TRUE)
tf2ambr_tf2bmbr <- read.table("../data/allSigGenes/tf2ambr_tf2bmbr_DE_sig.txt", header = TRUE, fill = TRUE)
tf2ambr_tf2cmbr <- read.table("../data/allSigGenes/tf2ambr_tf2cmbr_DE_sig.txt", header = TRUE, fill = TRUE)
tf2aother_tf2bother <- read.table("../data/allSigGenes/tf2aother_tf2bother_DE_sig.txt", header = TRUE, fill = TRUE)
tf2bmbr_tf2bother <- read.table("../data/allSigGenes/tf2bmbr_tf2bother_DE_sig.txt", header = TRUE, fill = TRUE)
tf2bmbr_tf2cmbr <- read.table("../data/allSigGenes/tf2bmbr_tf2cmbr_DE_sig.txt", header = TRUE, fill = TRUE)
tf2bother_tf2cother <- read.table("../data/allSigGenes/tf2bother_tf2cother_DE_sig.txt", header = TRUE, fill = TRUE)
tf2cmbr_tf2cother <- read.table("../data/allSigGenes/tf2cmbr_tf2cother_DE_sig.txt", header = TRUE, fill = TRUE)
setwd("~/Dropbox/Research/LCMProject/06diffGeneExp/analysis/DE/tf2bother_tf2cother")
print(sample1)
print(sample2)
library(yaml)
```
library(edgeR)
yamls <- yaml.load_file("de.yml")
sample1 <- yamls$sample1
sample2 <- yamls$sample2
library(rmarkdown)
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
yamls <- yaml.load_file("de.yml")
sample1 <- yamls$sample1
sample2 <- yamls$sample2
print(sample1)
print(sample2)
library(rmarkdown)
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
tf2aother_tf2cother  <- read.table("../data/allSigGenes/tf2aother_tf2cother_DE_sig.txt", header = TRUE, fill = TRUE)
tf2ambr_tf2aother <- read.table("../data/allSigGenes/tf2ambr_tf2aother_DE_sig.txt", header = TRUE, fill = TRUE)
tf2ambr_tf2bmbr <- read.table("../data/allSigGenes/tf2ambr_tf2bmbr_DE_sig.txt", header = TRUE, fill = TRUE)
tf2ambr_tf2cmbr <- read.table("../data/allSigGenes/tf2ambr_tf2cmbr_DE_sig.txt", header = TRUE, fill = TRUE)
tf2aother_tf2bother <- read.table("../data/allSigGenes/tf2aother_tf2bother_DE_sig.txt", header = TRUE, fill = TRUE)
tf2bmbr_tf2bother <- read.table("../data/allSigGenes/tf2bmbr_tf2bother_DE_sig.txt", header = TRUE, fill = TRUE)
tf2bmbr_tf2cmbr <- read.table("../data/allSigGenes/tf2bmbr_tf2cmbr_DE_sig.txt", header = TRUE, fill = TRUE)
tf2bother_tf2cother <- read.table("../data/allSigGenes/tf2bother_tf2cother_DE_sig.txt", header = TRUE, fill = TRUE)
tf2cmbr_tf2cother <- read.table("../data/allSigGenes/tf2cmbr_tf2cother_DE_sig.txt", header = TRUE, fill = TRUE)
setwd("~/Dropbox/Research/LCMProject/08SOM/lcmSOM/r")
tf2aother_tf2cother  <- read.table("../data/allSigGenes/tf2aother_tf2cother_DE_sig.txt", header = TRUE, fill = TRUE)
tf2ambr_tf2aother <- read.table("../data/allSigGenes/tf2ambr_tf2aother_DE_sig.txt", header = TRUE, fill = TRUE)
tf2ambr_tf2bmbr <- read.table("../data/allSigGenes/tf2ambr_tf2bmbr_DE_sig.txt", header = TRUE, fill = TRUE)
tf2ambr_tf2cmbr <- read.table("../data/allSigGenes/tf2ambr_tf2cmbr_DE_sig.txt", header = TRUE, fill = TRUE)
tf2aother_tf2bother <- read.table("../data/allSigGenes/tf2aother_tf2bother_DE_sig.txt", header = TRUE, fill = TRUE)
tf2bmbr_tf2bother <- read.table("../data/allSigGenes/tf2bmbr_tf2bother_DE_sig.txt", header = TRUE, fill = TRUE)
tf2bmbr_tf2cmbr <- read.table("../data/allSigGenes/tf2bmbr_tf2cmbr_DE_sig.txt", header = TRUE, fill = TRUE)
tf2bother_tf2cother <- read.table("../data/allSigGenes/tf2bother_tf2cother_DE_sig.txt", header = TRUE, fill = TRUE)
tf2cmbr_tf2cother <- read.table("../data/allSigGenes/tf2cmbr_tf2cother_DE_sig.txt", header = TRUE, fill = TRUE)
allGenes <- rbind(tf2aother_tf2cother, tf2ambr_tf2aother, tf2ambr_tf2bmbr, tf2ambr_tf2cmbr, tf2aother_tf2bother,tf2bmbr_tf2cmbr,tf2bother_tf2cother,tf2cmbr_tf2cother)
dim(allGenes)
head(allGenes)
allGenesITAG <- allGenes[,1]
length(allGenesITAG)
allGenesITAG <- unique(allGenesITAG)
allGeneList <- data.frame(t(rep(NA,7)))
colnames(allGeneList) <- c("type", "genotype", "N", "mean", "sd", "se", "gene")
allGeneList <- allGeneList[-1,] #remove first row
head(allGeneList)
for(GENE in allGenesITAG) {
if(length(grep(GENE, countData$gene)) < 1){ #this is just making sure that the list of sig genes
next;
}
geneData <- subset(countData, grepl(GENE, countData$gene))
sumGraph <- ddply(geneData, c("type", "genotype"), summarise,
N    = length(count),
mean = mean(count),
sd   = sd(count),
se   = sd / sqrt(N))
sumGraph$gene <- GENE
allGeneList  <- rbind(allGeneList, sumGraph) #bind together all the new rows per loop.
}
write.table(allGeneList, file = "../data/allGeneList.tf2only_analysis1.5.csv", sep = ",")
allGenesITAG <- unique(allGenesITAG)
allGeneList <- data.frame(t(rep(NA,7)))
colnames(allGeneList) <- c("type", "genotype", "N", "mean", "sd", "se", "gene")
allGeneList <- allGeneList[-1,] #remove first row
head(allGeneList)
allGenesITAG <- unique(allGenesITAG)
head(allGeneITAG)
head(allGenesITAG)
for(GENE in allGenesITAG[1:10]) {
if(length(grep(GENE, countData$gene)) < 1){ #this is just making sure that the list of sig genes
next;
}
geneData <- subset(countData, grepl(GENE, countData$gene))
sumGraph <- ddply(geneData, c("type", "genotype"), summarise,
N    = length(count),
mean = mean(count),
sd   = sd(count),
se   = sd / sqrt(N))
sumGraph$gene <- GENE
allGeneList  <- rbind(allGeneList, sumGraph) #bind together all the new rows per loop.
}
dim(allGeneList)
head(allGeneList)
for(GENE in allGenesITAG) {
if(length(grep(GENE, countData$gene)) < 1){ #this is just making sure that the list of sig genes
next;
}
geneData <- subset(countData, grepl(GENE, countData$gene))
sumGraph <- ddply(geneData, c("type", "genotype"), summarise,
N    = length(count),
mean = mean(count),
sd   = sd(count),
se   = sd / sqrt(N))
sumGraph$gene <- GENE
allGeneList  <- rbind(allGeneList, sumGraph) #bind together all the new rows per loop.
}
head(allGeneList)
allGeneList$gene
allGeneList
allGenesITAG
tf2aother_tf2cother
tf2aother_tf2cother$ITAG
head(allGenes)
tf2aother_tf2cother$ITAG
tf2ambr_tf2aother$ITAG
allGenes$ITAG
tf2ambr_tf2aother <- read.table("../data/allSigGenes/tf2ambr_tf2aother_DE_sig.txt", header = TRUE, fill = TRUE)
tf2ambr_tf2aother$ITAG
#Read in each list of DE expressed genes
tf2aother_tf2cother  <- read.table("../data/allSigGenes/tf2aother_tf2cother_DE_sig.txt", header = TRUE, fill = TRUE)
tf2ambr_tf2aother <- read.table("../data/allSigGenes/tf2ambr_tf2aother_DE_sig.txt", header = TRUE, fill = TRUE)
tf2ambr_tf2bmbr <- read.table("../data/allSigGenes/tf2ambr_tf2bmbr_DE_sig.txt", header = TRUE, fill = TRUE)
tf2ambr_tf2cmbr <- read.table("../data/allSigGenes/tf2ambr_tf2cmbr_DE_sig.txt", header = TRUE, fill = TRUE)
tf2aother_tf2bother <- read.table("../data/allSigGenes/tf2aother_tf2bother_DE_sig.txt", header = TRUE, fill = TRUE)
tf2bmbr_tf2bother <- read.table("../data/allSigGenes/tf2bmbr_tf2bother_DE_sig.txt", header = TRUE, fill = TRUE)
tf2bmbr_tf2cmbr <- read.table("../data/allSigGenes/tf2bmbr_tf2cmbr_DE_sig.txt", header = TRUE, fill = TRUE)
tf2bother_tf2cother <- read.table("../data/allSigGenes/tf2bother_tf2cother_DE_sig.txt", header = TRUE, fill = TRUE)
tf2cmbr_tf2cother <- read.table("../data/allSigGenes/tf2cmbr_tf2cother_DE_sig.txt", header = TRUE, fill = TRUE)
#merge them together
allGenes <- rbind(tf2aother_tf2cother, tf2ambr_tf2aother$ITAG, tf2ambr_tf2bmbr, tf2ambr_tf2cmbr, tf2aother_tf2bother,tf2bmbr_tf2cmbr,tf2bother_tf2cother,tf2cmbr_tf2cother)
dim(allGenes)
head(allGenes)
allGenes$ITAG
#recieve just the list
allGenesITAG <- allGenes[,1]
length(allGenesITAG)
#Remove duplicates
allGenesITAG <- unique(allGenesITAG)
head(allGenesITAG)
#make an empty table to hold all the genes
allGeneList <- data.frame(t(rep(NA,7)))
colnames(allGeneList) <- c("type", "genotype", "N", "mean", "sd", "se", "gene")
allGeneList <- allGeneList[-1,] #remove first row
tf2aother_tf2cother  <- read.table("../data/allSigGenes/tf2aother_tf2cother_DE_sig.txt", header = TRUE, fill = TRUE)
tf2ambr_tf2aother <- read.table("../data/allSigGenes/tf2ambr_tf2aother_DE_sig.txt", header = TRUE, fill = TRUE)
tf2ambr_tf2bmbr <- read.table("../data/allSigGenes/tf2ambr_tf2bmbr_DE_sig.txt", header = TRUE, fill = TRUE)
tf2ambr_tf2cmbr <- read.table("../data/allSigGenes/tf2ambr_tf2cmbr_DE_sig.txt", header = TRUE, fill = TRUE)
tf2aother_tf2bother <- read.table("../data/allSigGenes/tf2aother_tf2bother_DE_sig.txt", header = TRUE, fill = TRUE)
tf2bmbr_tf2bother <- read.table("../data/allSigGenes/tf2bmbr_tf2bother_DE_sig.txt", header = TRUE, fill = TRUE)
tf2bmbr_tf2cmbr <- read.table("../data/allSigGenes/tf2bmbr_tf2cmbr_DE_sig.txt", header = TRUE, fill = TRUE)
tf2bother_tf2cother <- read.table("../data/allSigGenes/tf2bother_tf2cother_DE_sig.txt", header = TRUE, fill = TRUE)
tf2cmbr_tf2cother <- read.table("../data/allSigGenes/tf2cmbr_tf2cother_DE_sig.txt", header = TRUE, fill = TRUE)
#merge them together
allGenes <- rbind(tf2aother_tf2cother, tf2ambr_tf2aother, tf2ambr_tf2bmbr, tf2ambr_tf2cmbr, tf2aother_tf2bother,tf2bmbr_tf2cmbr,tf2bother_tf2cother,tf2cmbr_tf2cother)
dim(allGenes)
head(allGenes)
allGenes$ITAG
#recieve just the list
allGenesITAG <- allGenes[,1]
length(allGenesITAG)
#Remove duplicates
allGenesITAG <- unique(allGenesITAG)
head(allGenesITAG)
#make an empty table to hold all the genes
allGeneList <- data.frame(t(rep(NA,7)))
colnames(allGeneList) <- c("type", "genotype", "N", "mean", "sd", "se", "gene")
allGeneList <- allGeneList[-1,] #remove first row
tf2ambr_tf2aother$ITAG
tf2ambr_tf2bmbr$ITAG
tf2ambr_tf2aother <- read.table("../data/allSigGenes/tf2ambr_tf2aother_DE_sig.txt", header = TRUE, fill = TRUE)
tf2ambr_tf2aother$ITAG
tf2aother_tf2cother  <- read.table("../data/allSigGenes/tf2aother_tf2cother_DE_sig.txt", header = TRUE, fill = TRUE)
tf2ambr_tf2aother <- read.table("../data/allSigGenes/tf2ambr_tf2aother_DE_sig.txt", header = TRUE, fill = TRUE)
tf2ambr_tf2bmbr <- read.table("../data/allSigGenes/tf2ambr_tf2bmbr_DE_sig.txt", header = TRUE, fill = TRUE)
tf2ambr_tf2cmbr <- read.table("../data/allSigGenes/tf2ambr_tf2cmbr_DE_sig.txt", header = TRUE, fill = TRUE)
tf2aother_tf2bother <- read.table("../data/allSigGenes/tf2aother_tf2bother_DE_sig.txt", header = TRUE, fill = TRUE)
tf2bmbr_tf2bother <- read.table("../data/allSigGenes/tf2bmbr_tf2bother_DE_sig.txt", header = TRUE, fill = TRUE)
tf2bmbr_tf2cmbr <- read.table("../data/allSigGenes/tf2bmbr_tf2cmbr_DE_sig.txt", header = TRUE, fill = TRUE)
tf2bother_tf2cother <- read.table("../data/allSigGenes/tf2bother_tf2cother_DE_sig.txt", header = TRUE, fill = TRUE)
tf2cmbr_tf2cother <- read.table("../data/allSigGenes/tf2cmbr_tf2cother_DE_sig.txt", header = TRUE, fill = TRUE)
tf2ambr_tf2aother$ITAG
tf2ambr_tf2aother <- read.table("../data/allSigGenes/tf2ambr_tf2aother_DE_sig.txt", header = TRUE, fill = TRUE)
head(tf2ambr_tf2aother) <- read.table("../data/allSigGenes/tf2ambr_tf2aother_DE_sig.txt", header = TRUE, fill = TRUE)
head(tf2ambr_tf2aother)
head(tf2ambr_tf2aother, 30)
head(tf2ambr_tf2aother, 20:40)
tf2ambr_tf2aother <- read.table("../data/allSigGenes/tf2ambr_tf2aother_DE_sig.txt", header = TRUE, fill = TRUE)
tf2ambr_tf2aother$ITAG
tf2ambr_tf2aother <- read.table("../data/allSigGenes/tf2ambr_tf2aother_DE_sig.txt", header = TRUE, fill = TRUE)
tf2ambr_tf2aother <- read.table("../data/allSigGenes/tf2ambr_tf2aother_DE_sig.txt", header = TRUE, fill = TRUE)
