#Subset by Genotype, since we will not be looking at tf2 at this stage
countData <- subset(countData, genotype == "wt")
#All get a list of all ITAG genes.
#make an empty table to hold all the genes
allGeneList <- data.frame(t(rep(NA,7)))
colnames(allGeneList) <- c("type", "genotype", "N", "mean", "sd", "se", "gene")
allGeneList <- allGeneList[-1,] #remove first row
head(allGeneList)
head(countDataFull)
allGenesITAG <- countDataFull[,1]
head(allGenesITAG)
dim(allGenesITAG)
length(allGenesITAG)
allGenesITAG <- countDataFull[,1]
length(allGenesITAG)
#Read in count data
countData <- read.csv("../data/normalized_read_count.csv")
#Melt count data
countData <- melt(countData)
colnames(countData) <- c("gene", "sample", "count")
#set genotype
countData$genotype <- ifelse(grepl("wt", countData$sample, ignore.case = T), "wt",
ifelse(grepl("tf2", countData$sample, ignore.case = T), "tf2", "unknown"))
#set tissue
countData$tissue <- ifelse(grepl("other", countData$sample, ignore.case = T), "other",
ifelse(grepl("mbr", countData$sample, ignore.case = T), "mbr", "unknown"))
#Set Region
countData$region <- ifelse(grepl("a", countData$sample, ignore.case = T), "A",
ifelse(grepl("c", countData$sample, ignore.case = T), "C", "B"))
#Set type
countData$type <- paste(countData$region, countData$tissue,  sep = "")
head(countData)
#Subset by Genotype, since we will not be looking at tf2 at this stage
countData <- subset(countData, genotype == "wt")
```
###Most Significantly DE genes
```{r}
#Read in each list of DE expressed genes
wtaother_wtcother  <- read.table("../data/allSigGenes/wtaother_wtcother_DE_sig.txt", header = TRUE, fill = TRUE)
wtambr_wtaother <- read.table("../data/allSigGenes/wtambr_wtaother_DE_sig.txt", header = TRUE, fill = TRUE)
wtambr_wtbmbr <- read.table("../data/allSigGenes/wtambr_wtbmbr_DE_sig.txt", header = TRUE, fill = TRUE)
wtambr_wtcmbr <- read.table("../data/allSigGenes/wtambr_wtcmbr_DE_sig.txt", header = TRUE, fill = TRUE)
wtaother_wtbother <- read.table("../data/allSigGenes/wtaother_wtbother_DE_sig.txt", header = TRUE, fill = TRUE)
wtbmbr_wtbother <- read.table("../data/allSigGenes/wtbmbr_wtbother_DE_sig.txt", header = TRUE, fill = TRUE)
wtbmbr_wtcmbr <- read.table("../data/allSigGenes/wtbmbr_wtcmbr_DE_sig.txt", header = TRUE, fill = TRUE)
wtbother_wtcother <- read.table("../data/allSigGenes/wtbother_wtcother_DE_sig.txt", header = TRUE, fill = TRUE)
wtcmbr_wtcother <- read.table("../data/allSigGenes/wtcmbr_wtcother_DE_sig.txt", header = TRUE, fill = TRUE)
#merge them together
allGenes <- rbind(wtaother_wtcother, wtambr_wtaother, wtambr_wtbmbr, wtambr_wtcmbr, wtaother_wtbother,wtbmbr_wtcmbr,wtbother_wtcother,wtcmbr_wtcother)
dim(allGenes)
head(allGenes)
#recieve just the list
allGenesITAG <- allGenes[,1]
length(allGenesITAG)
#Remove duplicates
allGenesITAG <- unique(allGenesITAG)
#make an empty table to hold all the genes
allGeneList <- data.frame(t(rep(NA,7)))
colnames(allGeneList) <- c("type", "genotype", "N", "mean", "sd", "se", "gene")
allGeneList <- allGeneList[-1,] #remove first row
head(allGeneList)
#Getting full list of between tissue
The purpose of this is to use all genes in creating the SOM, regardless of significance.  Using all genes from normalized read count.
##Read in files
Create a list of all DE analysis:
```{r}
#Read in count data
countDataFull <- read.csv("../data/normalized_read_count.csv")
#Melt count data
countData <- melt(countDataFull)
colnames(countData) <- c("gene", "sample", "count")
#set genotype
countData$genotype <- ifelse(grepl("wt", countData$sample, ignore.case = T), "wt",
ifelse(grepl("tf2", countData$sample, ignore.case = T), "tf2", "unknown"))
#set tissue
countData$tissue <- ifelse(grepl("other", countData$sample, ignore.case = T), "other",
ifelse(grepl("mbr", countData$sample, ignore.case = T), "mbr", "unknown"))
#Set Region
countData$region <- ifelse(grepl("a", countData$sample, ignore.case = T), "A",
ifelse(grepl("c", countData$sample, ignore.case = T), "C", "B"))
#Set type
countData$type <- paste(countData$region, countData$tissue,  sep = "")
head(countData)
#Subset by Genotype, since we will not be looking at tf2 at this stage
countData <- subset(countData, genotype == "wt")
#All get a list of all ITAG genes.
#make an empty table to hold all the genes
allGeneList <- data.frame(t(rep(NA,7)))
colnames(allGeneList) <- c("type", "genotype", "N", "mean", "sd", "se", "gene")
allGeneList <- allGeneList[-1,] #remove first row
head(allGeneList)
#Get list of all ITAG gene names
allGenesITAG <- countDataFull[,1]
length(allGenesITAG)
length(allGenesITAG)
```{r, tidy = FALSE}
for(GENE in allGenesITAG[4]) {
if(length(grep(GENE, countData$gene)) < 1){ #this is just making sure that the curated
next;
}
geneData <- subset(countData, grepl(GENE, countData$gene))
sumGraph <- ddply(geneData, c("type", "genotype"), summarise,
N    = length(count),
mean = mean(count),
sd   = sd(count),
se   = sd / sqrt(N))
sumGraph$gene <- GENE
allGeneList  <- rbind(allGeneList, sumGraph) #bind together all the new rows per loop.
}
library(ggplot2)
library(reshape)
library(kohonen)
library(ggplot2)
library(reshape)
library(kohonen)
for(GENE in allGenesITAG[4]) {
if(length(grep(GENE, countData$gene)) < 1){ #this is just making sure that the curated
next;
}
geneData <- subset(countData, grepl(GENE, countData$gene))
sumGraph <- ddply(geneData, c("type", "genotype"), summarise,
N    = length(count),
mean = mean(count),
sd   = sd(count),
se   = sd / sqrt(N))
sumGraph$gene <- GENE
allGeneList  <- rbind(allGeneList, sumGraph) #bind together all the new rows per loop.
}
library(reshape)
library(kohonen)
```
library(ggplot2)
library(reshape)
library(kohonen)
for(GENE in allGenesITAG[4]) {
if(length(grep(GENE, countData$gene)) < 1){ #this is just making sure that the curated
next;
}
geneData <- subset(countData, grepl(GENE, countData$gene))
sumGraph <- ddply(geneData, c("type", "genotype"), summarise,
N    = length(count),
mean = mean(count),
sd   = sd(count),
se   = sd / sqrt(N))
sumGraph$gene <- GENE
allGeneList  <- rbind(allGeneList, sumGraph) #bind together all the new rows per loop.
}
library(plyr)
for(GENE in allGenesITAG[4]) {
if(length(grep(GENE, countData$gene)) < 1){ #this is just making sure that the curated
next;
}
geneData <- subset(countData, grepl(GENE, countData$gene))
sumGraph <- ddply(geneData, c("type", "genotype"), summarise,
N    = length(count),
mean = mean(count),
sd   = sd(count),
se   = sd / sqrt(N))
sumGraph$gene <- GENE
allGeneList  <- rbind(allGeneList, sumGraph) #bind together all the new rows per loop.
}
allGeneList
for(GENE in allGenesITAG[1:6]) {
if(length(grep(GENE, countData$gene)) < 1){ #this is just making sure that the curated
next;
}
geneData <- subset(countData, grepl(GENE, countData$gene))
sumGraph <- ddply(geneData, c("type", "genotype"), summarise,
N    = length(count),
mean = mean(count),
sd   = sd(count),
se   = sd / sqrt(N))
sumGraph$gene <- GENE
allGeneList  <- rbind(allGeneList, sumGraph) #bind together all the new rows per loop.
}
allGeneList
for(GENE in allGenesITAG[1:6]) {
geneData <- subset(countData, grepl(GENE, countData$gene))
sumGraph <- ddply(geneData, c("type", "genotype"), summarise,
N    = length(count),
mean = mean(count),
sd   = sd(count),
se   = sd / sqrt(N))
sumGraph$gene <- GENE
allGeneList  <- rbind(allGeneList, sumGraph) #bind together all the new rows per loop.
}
allGeneList
for(GENE in allGenesITAG[1:6]) {
print(GENE)
geneData <- subset(countData, grepl(GENE, countData$gene))
sumGraph <- ddply(geneData, c("type", "genotype"), summarise,
N    = length(count),
mean = mean(count),
sd   = sd(count),
se   = sd / sqrt(N))
sumGraph$gene <- GENE
allGeneList  <- rbind(allGeneList, sumGraph) #bind together all the new rows per loop.
}
for(GENE in allGenesITAG[1:6]) {
print(GENE + 1)
geneData <- subset(countData, grepl(GENE, countData$gene))
sumGraph <- ddply(geneData, c("type", "genotype"), summarise,
N    = length(count),
mean = mean(count),
sd   = sd(count),
se   = sd / sqrt(N))
sumGraph$gene <- GENE
allGeneList  <- rbind(allGeneList, sumGraph) #bind together all the new rows per loop.
}
for(GENE in allGenesITAG[1:6]) {
print(GENE[])
geneData <- subset(countData, grepl(GENE, countData$gene))
sumGraph <- ddply(geneData, c("type", "genotype"), summarise,
N    = length(count),
mean = mean(count),
sd   = sd(count),
se   = sd / sqrt(N))
sumGraph$gene <- GENE
allGeneList  <- rbind(allGeneList, sumGraph) #bind together all the new rows per loop.
}
length(allGenesITAG)
n <- 7
pb <- txtProgressBar(min = 0, max = n, style = 3) #text based bar
n <- 7
pb <- txtProgressBar(min = 0, max = n, style = 3) #text based bar
for(i in 1:n){
Sys.sleep(0.001)
setTxtProgressBar(pb, i)
}
close(pb)
for(GENE in allGenesITAG[1:7]) {
Sys.sleep(0.001)
setTxtProgressBar(pb, i)
print(GENE)
geneData <- subset(countData, grepl(GENE, countData$gene))
sumGraph <- ddply(geneData, c("type", "genotype"), summarise,
N    = length(count),
mean = mean(count),
sd   = sd(count),
se   = sd / sqrt(N))
sumGraph$gene <- GENE
allGeneList  <- rbind(allGeneList, sumGraph) #bind together all the new rows per loop.
}
close(pb)
for(GENE in allGenesITAG[1:n]) {
Sys.sleep(0.001)
setTxtProgressBar(pb, GENE)
geneData <- subset(countData, grepl(GENE, countData$gene))
sumGraph <- ddply(geneData, c("type", "genotype"), summarise,
N    = length(count),
mean = mean(count),
sd   = sd(count),
se   = sd / sqrt(N))
sumGraph$gene <- GENE
allGeneList  <- rbind(allGeneList, sumGraph) #bind together all the new rows per loop.
}
close(pb)
for(GENE in allGenesITAG) {
Sys.sleep(0.001)
setTxtProgressBar(pb, GENE)
geneData <- subset(countData, grepl(GENE, countData$gene))
sumGraph <- ddply(geneData, c("type", "genotype"), summarise,
N    = length(count),
mean = mean(count),
sd   = sd(count),
se   = sd / sqrt(N))
sumGraph$gene <- GENE
allGeneList  <- rbind(allGeneList, sumGraph) #bind together all the new rows per loop.
}
dim(allGeneList)
head(allGeneList)
write.table(allGeneList, file = "../data/allGeneList.analysis2.csv", sep = ",")
library(ggplot2)
library(reshape)
library(kohonen)
library(plyr)
mostDEgenes <- read.csv("../data/allGeneList.analysis2.csv")
mostDEgenes <- mostDEgenes[c(7, 1, 4)] #keep only needed columns (gene, type, mean)
summary(mostDEgenes)
head(mostDEgenes)
mostDEgene.long <- cast(mostDEgenes, gene ~ type, value.var = mean, fun.aggregate = "mean")
mostDEgene.long <- as.data.frame(mostDEgene.long) #or does not keep column names during transformation.
names(mostDEgene.long)
scale_data <- as.matrix(t(scale(t(mostDEgene.long[c(2:7)]))))
head(scale_data)
scale_data <- as.matrix(t(scale(t(mostDEgene.long[c(2:7)]))))
head(scale_data)
mostDEgene.long <- as.data.frame(mostDEgene.long) #or does not keep column names during transformation.
names(mostDEgene.long)
head(scale_data)
pca <- prcomp(scale_data, scale=TRUE)
summary(pca)
pca.scores <- data.frame(pca$x)
data.val <- cbind(mostDEgene.long, scale_data, pca.scores)
head(data.val)
head(data.val)
p <- ggplot(data.val, aes(PC1, PC2))
p + geom_point()
names(data.val)
som.data <- as.matrix(data.val[,c(7:11)])
set.seed(2)
som <- som(data=som.data, somgrid(3,3,"hexagonal"))
summary(som)
plot(som, type ="changes")
plot(som, type = "codes")
plot(som, type ="changes")
plot(som, type = "codes")
plot(som, type = "counts")
plot(som, type = "quality")
data.val <- cbind(sig.tissue,sc.m82,sc.penn,ssom$unit.classif, ssom$distances)
head(data.val)
head(data.val)
plot(som, type = "counts")
plot(som, type = "quality")
data.val <- cbind(sig.tissue,sc.m82,sc.penn,ssom$unit.classif, ssom$distances)
head(data.val)
plot(som, type ="changes")
plot(som, type = "codes")
som.data <- as.matrix(data.val[,c(8:11)])
set.seed(2)
som <- som(data=som.data, somgrid(3,3,"hexagonal"))
summary(som)
plot(som, type ="changes")
plot(som, type = "codes")
plot(som, type = "counts")
plot(som, type = "quality")
plot(som, type = "counts")
plot(som, type ="changes")
plot(som, type = "codes")
plot(som, type = "counts")
plot(som, type = "quality")
som.data <- as.matrix(data.val[,c(8:11)])
set.seed(2)
som <- som(data=som.data, somgrid(3,3,"hexagonal"))
summary(som)
plot(som, type ="changes")
head(som.data)
som.data <- as.matrix(data.val[,c(6:11)])
head(som.data)
set.seed(2)
som <- som(data=som.data, somgrid(3,3,"hexagonal"))
summary(som)
plot(som, type ="changes")
plot(som, type = "codes")
plot(som, type = "counts")
plot(som, type = "quality")
som.data <- as.matrix(data.val[,c(8:11)])
head(som.data)
set.seed(2)
som <- som(data=som.data, somgrid(3,3,"hexagonal"))
summary(som)
plot(som, type ="changes")
plot(som, type = "codes")
som.data <- as.matrix(data.val[,c(6:11)])
head(som.data)
set.seed(2)
som <- som(data=som.data, somgrid(3,3,"hexagonal"))
summary(som)
plot(som, type ="changes")
plot(som, type = "codes")
plot(som, type = "counts")
plot(som, type = "quality")
som.data <- as.matrix(data.val[,c(6:11)])
head(som.data)
set.seed(7)
som <- som(data=som.data, somgrid(3,3,"hexagonal"))
summary(som)
plot(som, type ="changes")
plot(som, type = "codes")
plot(som, type = "counts")
plot(som, type = "quality")
som.data <- as.matrix(data.val[,c(6:11)])
head(som.data)
som.data <- as.matrix(data.val[,c(9:11)])
head(som.data)
set.seed(2)
som <- som(data=som.data, somgrid(3,3,"hexagonal"))
summary(som)
plot(som, type ="changes")
plot(som, type = "codes")
plot(som, type = "counts")
plot(som, type = "codes")
plot(som, type = "counts")
plot(som, type = "quality")
head(data.val)
plot(som, type ="changes")
plot(som, type = "codes")
plot(som, type = "counts")
plot(som, type = "quality")
som.data <- as.matrix(data.val[,c(7:11)])
head(som.data)
som.data <- as.matrix(data.val[,c(6:11)])
head(som.data)
plot(som, type ="changes")
plot(som, type = "codes")
plot(som, type = "counts")
plot(som, type = "quality")
plot(som, type = "codes")
plot(som, type = "quality")
head(data.val)
mostDEgenes <- read.csv("../data/allGeneList.analysis2.csv")
head(mostDEgenes)
plot(som, type ="changes")
plot(som, type = "codes")
som.data <- as.matrix(data.val[,c(6:11)]) #This is where you set how many libraries are involved.
head(som.data)
set.seed(2)
som <- som(data=som.data, somgrid(3,3,"hexagonal"))
summary(som)
plot(som, type ="changes")
plot(som, type = "codes")
plot(som, type = "counts")
som.data <- as.matrix(data.val[,c(9:11)]) #This is where you set how many libraries are involved.
head(som.data)
set.seed(2)
som <- som(data=som.data, somgrid(3,3,"hexagonal"))
summary(som)
plot(som, type ="changes")
plot(som, type = "codes")
plot(som, type = "counts")
plot(som, type = "codes")
som.data <- as.matrix(data.val[,c(6:11)]) #This is where you set how many libraries are involved.
head(som.data)
set.seed(2)
som <- som(data=som.data, somgrid(3,3,"hexagonal"))
summary(som)
plot(som, type ="changes")
plot(som, type = "codes")
som <- som(data=som.data, somgrid(3,"hexagonal"))
summary(som)
plot(som, type ="changes")
plot(som, type = "codes")
som <- som(data=som.data, somgrid(3,3,"hexagonal"))
som <- som(data=som.data, somgrid(6,6,"hexagonal"))
summary(som)
plot(som, type ="changes")
plot(som, type = "codes")
som <- som(data=som.data, somgrid(3,3,"hexagonal"))
summary(som)
plot(som, type ="changes")
plot(som, type = "codes")
plot(som, type = "counts")
plot(som, type = "codes")
som <- som(data=som.data, somgrid(3,4,"hexagonal"))
summary(som)
plot(som, type ="changes")
plot(som, type = "codes")
plot(som, type = "counts")
plot(som, type = "quality")
som <- som(data=som.data, somgrid(3,3,"hexagonal"))
plot(som, type = "codes")
som <- som(data=som.data, somgrid(3,2,"hexagonal"))
summary(som)
plot(som, type ="changes")
plot(som, type ="changes")
plot(som, type = "codes")
plot(som, type = "counts")
som <- som(data=som.data, somgrid(3,0,"hexagonal"))
summary(som)
plot(som, type ="changes")
plot(som, type = "codes")
som <- som(data=som.data, somgrid(3,1,"hexagonal"))
som.data <- as.matrix(data.val[,c(6:11)]) #This is where you set how many libraries are involved.
head(som.data)
set.seed(2)
som <- som(data=som.data, somgrid(3,1,"hexagonal"))
som.data <- as.matrix(data.val[,c(6:11)]) #This is where you set how many libraries are involved.
head(som.data)
set.seed(2)
som <- som(data=som.data, somgrid(3,1,"hexagonal"))
summary(som)
plot(som, type ="changes")
plot(som, type = "codes")
som <- som(data=som.data, somgrid(3,3,"hexagonal"))
summary(som)
plot(som, type ="changes")
plot(som, type = "codes")
plot(som, type = "quality")
names(data.val)
set.seed(2)
plot(som, type ="changes")
plot(som, type = "codes")
plot(som, type = "codes")
plot(som, type = "counts")
p <- ggplot(data.val, aes(PC1, PC2))
p + geom_point()
p <- ggplot(data.val, aes(PC1, PC2, alpha = 0.5))
p + geom_point()
p <- ggplot(data.val, aes(PC1, PC2, alpha = 0.3))
p + geom_point()
p + geom_point(alph = 0.3)
p + geom_point(alpha = 0.3)
p <- ggplot(data.val, aes(PC1, PC2))
p + geom_point(alpha = 0.3)
p + geom_point(alpha = 0.1)
p + geom_point(alpha = 0.3)
plot(som, type = "counts")
plot(som, type = "quality")
data.val <- cbind(sig.tissue,sc.m82,sc.penn,ssom$unit.classif, ssom$distances)
som.data <- as.matrix(data.val[,c(9:11)]) #This is where you set how many libraries are involved.
head(som.data)
set.seed(2) # This does not appear to influence the outcome very much
som <- som(data=som.data, somgrid(3,3,"hexagonal"))
summary(som)
plot(som, type ="changes")
plot(som, type = "codes")
plot(som, type = "counts")
plot(som, type = "quality")
```
plot(som, type = "quality")
plot(som, type = "counts")
head(som.data)
