#+ facet_grid(.~curated)
}
#Prereq annotation files for function
annotation1<- read.delim("../../../06diffGeneExp/analysis/data/IT   AG2.3_all_Arabidopsis_ITAG_annotations.tsv", header=FALSE)  #Changed to the SGN human readable annotation
colnames(annotation1) <- c("ITAG", "SGN_annotation")
annotation2<- read.delim ("../../../06diffGeneExp/analysis/data/ITAG2.3_all_Arabidopsis_annotated.tsv")
annotation <- merge(annotation1,annotation2, by = "ITAG")
names(annotation)
#Only Gene Name and ITAG
annotation <- annotation[,c(1,5)]
###genesInClust()
#This looks at how many unique genes are in each cluster.
genesInClust <- function(clustNum, data.val2, annotation) {
sub_cluster <- subset(data.val2, som$unit.classif==clustNum)
sub_data <- as.data.frame(sub_cluster[,1])
colnames(sub_data) <- "ITAG"
resultsTable <- merge(sub_data,annotation,by = "ITAG", all.x=TRUE)
print(nrow(unique(resultsTable)))
return(unique(resultsTable))
}
genes25 <- read.csv("../data/analysis4.top25.csv")
head(genes25)
genes25 <- genes25[,c(2,9:14)]
```
```{r}
scale_data <- as.matrix(t(scale(t(genes25[c(2:7)]))))
pca <- prcomp(scale_data, scale=TRUE)
summary(pca)
pca.scores <- data.frame(pca$x)
data.val <- cbind(genes25, scale_data, pca.scores)
head(data.val)
```
##Visualizing the PCA
```{r}
p <- ggplot(data.val, aes(PC1, PC2))
p + geom_point()
```
##Self Organizing Map - (6,6), large
```{r}
#subset only the scaled gene expression values
head(scale_data)
set.seed(6)
som <- som(data=scale_data, somgrid(6,6,"hexagonal")) # This is where you change the size of the map
summary(som)
```
###Look at the SOM results
```{r}
plot(som, type = "codes")
plot(som, type = "counts")
plot(som, type="dist.neighbours")
head(som$codes)
som$data <- data.frame(som$data) #changed to dataframe to extract column names easier.
data.val2 <- cbind(data.val,som$unit.classif,som$distances)
#fix to one regex
data.val2$gene <- gsub("^(.*)[.].*", "\\1", data.val2$gene)
data.val2$gene <- gsub("^(.*)[.].*", "\\1", data.val2$gene)
head(data.val2)
```
Upload the gene expression list.
```{r}
geneList1 <- read.csv("../../../06diffGeneExp/analysis/indvGenes/yasuCuratedGenes/pnas.1402835111.sd06.csv")
#isolate the genes
genesOfInterest <- geneList1[,c(1,3)]
colnames(genesOfInterest) <- c("gene", "name")
names(genesOfInterest) #check
```
```{r}
#This is a ridiculas around assigning if a gene is a curated gene!
#Figure out more elegent way.
data.val2$curated <- match(data.val2$gene, genesOfInterest$gene)
data.val2$curated <- gsub("[[:digit:]]+", "yes", data.val2$curated)
data.val2$curated[is.na(data.val2$curated)] <- "no"
```
Visualize the major clusters.  Here are the leaf curated genes in PC space.
```{r}
head(data.val2)
p <- ggplot(data.val2, aes(PC1, PC2, color = curated))
p + geom_point(size=I(5), alpha = 0.6) +
scale_colour_manual(values=c("#cccccc", "#33ff33")) +
theme_bw()
```
###Visualize by Cluster
Read in data used for GO enrichment analysis.
```{r}
geneLength <- read.csv("../../../07GO_enrichment/requisiteData/normalized_genes_length.csv")
cate <- read.table("../../../07GO_enrichment/requisiteData/melted.GOTable.txt",header=TRUE)
```
###Cluster 1
```{r}
clusterVis(1)
library(VennDiagram)
library(ggplot2)
library(reshape)
library(kohonen)
library(goseq)
library(GO.db)
genes25 <- read.csv("../data/analysis4.top25.csv")
head(genes25)
genes25 <- genes25[,c(2,9:14)]
```
```{r}
scale_data <- as.matrix(t(scale(t(genes25[c(2:7)]))))
pca <- prcomp(scale_data, scale=TRUE)
summary(pca)
pca.scores <- data.frame(pca$x)
data.val <- cbind(genes25, scale_data, pca.scores)
head(data.val)
```
##Visualizing the PCA
```{r}
p <- ggplot(data.val, aes(PC1, PC2))
p + geom_point()
```
##Self Organizing Map - (6,6), large
```{r}
#subset only the scaled gene expression values
head(scale_data)
set.seed(6)
som <- som(data=scale_data, somgrid(6,6,"hexagonal")) # This is where you change the size of the map
summary(som)
```
###Look at the SOM results
```{r}
plot(som, type = "codes")
plot(som, type = "counts")
plot(som, type="dist.neighbours")
head(som$codes)
som$data <- data.frame(som$data) #changed to dataframe to extract column names easier.
data.val2 <- cbind(data.val,som$unit.classif,som$distances)
#fix to one regex
data.val2$gene <- gsub("^(.*)[.].*", "\\1", data.val2$gene)
data.val2$gene <- gsub("^(.*)[.].*", "\\1", data.val2$gene)
head(data.val2)
```
Upload the gene expression list.
```{r}
geneList1 <- read.csv("../../../06diffGeneExp/analysis/indvGenes/yasuCuratedGenes/pnas.1402835111.sd06.csv")
#isolate the genes
genesOfInterest <- geneList1[,c(1,3)]
colnames(genesOfInterest) <- c("gene", "name")
names(genesOfInterest) #check
```
```{r}
#This is a ridiculas around assigning if a gene is a curated gene!
#Figure out more elegent way.
data.val2$curated <- match(data.val2$gene, genesOfInterest$gene)
data.val2$curated <- gsub("[[:digit:]]+", "yes", data.val2$curated)
data.val2$curated[is.na(data.val2$curated)] <- "no"
```
Visualize the major clusters.  Here are the leaf curated genes in PC space.
```{r}
head(data.val2)
p <- ggplot(data.val2, aes(PC1, PC2, color = curated))
p + geom_point(size=I(5), alpha = 0.6) +
scale_colour_manual(values=c("#cccccc", "#33ff33")) +
theme_bw()
```
###Visualize by Cluster
Read in data used for GO enrichment analysis.
```{r}
geneLength <- read.csv("../../../07GO_enrichment/requisiteData/normalized_genes_length.csv")
cate <- read.table("../../../07GO_enrichment/requisiteData/melted.GOTable.txt",header=TRUE)
```
###Cluster 1
```{r}
clusterVis(1)
clusterVis(1)
clusterVis_PCA(1)
clusterVis_line(1)
clusterGO(1)
y <- genesInClust(1, data.val2, annotation)
intersect(y$ITAG, genesOfInterest$genes)
clusterVis(2)
clusterVis(2)
clusterVis_line(2)
y <- genesInClust(2, data.val2, annotation)
y <- genesInClust(2, data.val2, annotation)
#Analysis 9 - Getting a closer look at the clusters from the clusters from basic some WT only.
##Purpose
This analysis is based off of `lcmSOM_analysis4_072914.Rmd`, where the original dataset was made.  The top 25% of co-efficent of variation.
##Questions
1. What type of gene co-expression patterns are found in this data?
2. Is there any cluster that is enriched in genes from the curated leaf gene list?
3. Are there GO categories that are enriched in the clusters?
4. If there are GO categories, what are the genes that are represented?
##Caveats
1. While the standard deviation of expression of each gene in each tissue were from the reps were calculated, this was not used when creating the self organized map.
##Analysis Set-up
Required Libraries
```{r}
library(VennDiagram)
library(ggplot2)
library(reshape)
library(kohonen)
library(goseq)
library(GO.db)
source("./clusterFunctions.R")
```
Upload that dataset:
```{r}
genes25 <- read.csv("../data/analysis4.top25.csv")
head(genes25)
genes25 <- genes25[,c(2,9:14)]
```
```{r}
scale_data <- as.matrix(t(scale(t(genes25[c(2:7)]))))
pca <- prcomp(scale_data, scale=TRUE)
summary(pca)
pca.scores <- data.frame(pca$x)
data.val <- cbind(genes25, scale_data, pca.scores)
head(data.val)
```
##Visualizing the PCA
```{r}
p <- ggplot(data.val, aes(PC1, PC2))
p + geom_point()
```
##Self Organizing Map - (6,6), large
```{r}
#subset only the scaled gene expression values
head(scale_data)
set.seed(6)
som <- som(data=scale_data, somgrid(6,6,"hexagonal")) # This is where you change the size of the map
summary(som)
```
###Look at the SOM results
```{r}
plot(som, type = "codes")
plot(som, type = "counts")
plot(som, type="dist.neighbours")
head(som$codes)
som$data <- data.frame(som$data) #changed to dataframe to extract column names easier.
data.val2 <- cbind(data.val,som$unit.classif,som$distances)
#fix to one regex
data.val2$gene <- gsub("^(.*)[.].*", "\\1", data.val2$gene)
data.val2$gene <- gsub("^(.*)[.].*", "\\1", data.val2$gene)
head(data.val2)
```
Upload the gene expression list.
```{r}
geneList1 <- read.csv("../../../06diffGeneExp/analysis/indvGenes/yasuCuratedGenes/pnas.1402835111.sd06.csv")
#isolate the genes
genesOfInterest <- geneList1[,c(1,3)]
colnames(genesOfInterest) <- c("gene", "name")
names(genesOfInterest) #check
```
```{r}
#This is a ridiculas around assigning if a gene is a curated gene!
#Figure out more elegent way.
data.val2$curated <- match(data.val2$gene, genesOfInterest$gene)
data.val2$curated <- gsub("[[:digit:]]+", "yes", data.val2$curated)
data.val2$curated[is.na(data.val2$curated)] <- "no"
```
Visualize the major clusters.  Here are the leaf curated genes in PC space.
```{r}
head(data.val2)
p <- ggplot(data.val2, aes(PC1, PC2, color = curated))
p + geom_point(size=I(5), alpha = 0.6) +
scale_colour_manual(values=c("#cccccc", "#33ff33")) +
theme_bw()
```
###Visualize by Cluster
Read in data used for GO enrichment analysis.
```{r}
geneLength <- read.csv("../../../07GO_enrichment/requisiteData/normalized_genes_length.csv")
cate <- read.table("../../../07GO_enrichment/requisiteData/melted.GOTable.txt",header=TRUE)
```
###Cluster 1
```{r}
clusterVis(1)
clusterVis_PCA(1)
clusterVis_line(1)
clusterGO(1)
y <- genesInClust(1, data.val2, annotation)
#If value intersects with a leaf curated gene
intersect(y$ITAG, genesOfInterest$genes)
```
###Cluster 2
```{r}
clusterVis(2)
clusterVis_line(2)
clusterVis_line(2)
clusterVis_PCA(2)
clusterGO(2)
y <- genesInClust(2, data.val2, annotation)
###Cluster Functions
###Multi-Plot
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
#clusterVis Function
#displays transformed data in a box plot
clusterVis <- function(clustNum){
sub_cluster <- subset(data.val2, som$unit.classif==clustNum)
sub_data <- sub_cluster[,c(1, 8:13)] # just the sample types
m.data <- melt(sub_data)
p <- ggplot(m.data, aes(x=variable, y=value))
p + geom_point(alpha=0.5,position="jitter", size=1) +
geom_boxplot(alpha=0.75, outlier.size=0) +
theme_bw()
}
###clusterGO()
#Prints out how many genes in cluster and performs GO enrichment.
#*One thing you can add is if you do slim or regular GO.  Or both.*
clusterGO <- function(clustNum){
##Sets up plot
dev.off()
plot.new()
#sub_cluster
sub_cluster <- subset(data.val2, som$unit.classif==clustNum)
itag.sc <- as.data.frame(sub_cluster$gene)
colnames(itag.sc)[1] <- "itag"
itag.sc$sc <- 1
#Since each orthologue between tf2 and wt are represented twice in this set, we have to keep only the unique ITAGs.
itag.sc <- unique(itag.sc) #Check. Should cut the list in half. # dim(itag.sc) before and after
#Merge all by itag
matrixGO <- merge(itag.sc, geneLength, by = "itag", all = TRUE)
matrixGO[is.na(matrixGO)] <- 0
pat <- matrixGO
#Now that we have the data in the right format, we can proceed with GO enrichment.
genes = as.integer(pat[,"sc"])
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes,bias.data=pat$length)
GO.wall = goseq(pwf,gene2cat = cate)
head(GO.wall)
#This is going to correct for multiple testing.  You can specify the p-value cut-off of GO categories you are interested.
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
print(t) #prints only GO categories that are significant
}
###clusterVis_PCA
##Highlights the cluster in the PCA map
clusterVis_PCA <- function(clustNum) {
#make dataset for visualization
data.val3 <- data.val2
data.val3$cluster[data.val3[,20] == clustNum] <- "subcluster"
data.val3$cluster[data.val3[,20] != clustNum] <- "other"
#plot
p <- ggplot(data.val3, aes(PC1, PC2, color = cluster))
p + geom_point(size=I(5), alpha = 0.6) +
scale_colour_manual(values=c("#cccccc", "#00000")) +
theme_bw() +
theme(legend.text = element_text(
size = 16,
face = "bold"))
}
###clusterVis_line
clusterVis_line <- function(clustNum) {
sub_cluster <- subset(data.val2, som$unit.classif==clustNum)
sub_data <- sub_cluster[,c(1,8:13,22)] # just the sample types
sub_data <- melt(sub_data)
sub_data <- within(sub_data, lineGroup <- paste(gene,sep='.'))
ggplot(sub_data, aes(variable, value, group = lineGroup)) +
geom_line(alpha = .1) +
geom_point(alpha = .0) +
theme_bw()
#+ facet_grid(.~curated)
}
#Prereq annotation files for function
annotation1<- read.delim("../../../06diffGeneExp/analysis/data/IT   AG2.3_all_Arabidopsis_ITAG_annotations.tsv", header=FALSE)  #Changed to the SGN human readable annotation
colnames(annotation1) <- c("ITAG", "SGN_annotation")
annotation2<- read.delim ("../../../06diffGeneExp/analysis/data/ITAG2.3_all_Arabidopsis_annotated.tsv")
annotation <- merge(annotation1,annotation2, by = "ITAG")
names(annotation)
#Only Gene Name and ITAG
annotation <- annotation[,c(1,5)]
###genesInClust()
#This looks at how many unique genes are in each cluster.
genesInClust <- function(clustNum, data.val2, annotation) {
sub_cluster <- subset(data.val2, som$unit.classif==clustNum)
sub_data <- as.data.frame(sub_cluster[,1])
colnames(sub_data) <- "ITAG"
resultsTable <- merge(sub_data,annotation,by = "ITAG", all.x=TRUE)
print(nrow(unique(resultsTable)))
return(unique(resultsTable))
}
y <- genesInClust(2, data.val2, annotation)
genesInClust <- function(clustNum, data.val2, annotation) {
sub_cluster <- subset(data.val2, som$unit.classif==clustNum)
sub_data <- as.data.frame(sub_cluster[,1])
colnames(sub_data) <- "ITAG"
resultsTable <- merge(sub_data,annotation,by = "ITAG", all.x=TRUE)
print(nrow(unique(resultsTable)))
return(unique(resultsTable))
}
genesInClust <- function(clustNum, data.val2, annotation) {
sub_cluster <- subset(data.val2, som$unit.classif==clustNum)
sub_data <- as.data.frame(sub_cluster[,1])
colnames(sub_data) <- "ITAG"
resultsTable <- merge(sub_data,annotation,by = "ITAG", all.x=TRUE)
print(nrow(unique(resultsTable)))
return(unique(resultsTable))
}
y <- genesInClust(2, data.val2, annotation)
y <- genesInClust(3, data.val2, annotation)
sub_cluster <- subset(data.val2, som$unit.classif==4)
sub_data <- as.data.frame(sub_cluster[,1])
colnames(sub_data) <- "ITAG"
resultsTable <- merge(sub_data,annotation,by = "ITAG", all.x=TRUE)
print(nrow(unique(resultsTable)))
return(unique(resultsTable))
sub_cluster <- subset(data.val2, som$unit.classif==4)
sub_data <- as.data.frame(sub_cluster[,1])
colnames(sub_data) <- "ITAG"
resultsTable <- merge(sub_data,annotation,by = "ITAG", all.x=TRUE)
head(sub_data)
annotation1<- read.delim("../../../06diffGeneExp/analysis/data/IT   AG2.3_all_Arabidopsis_ITAG_annotations.tsv", header=FALSE)  #Changed to the SGN human readable annotation
setwd("~/Dropbox/Research/LCMProject/08SOM/lcmSOM/r")
annotation1<- read.delim("../../../06diffGeneExp/analysis/data/IT   AG2.3_all_Arabidopsis_ITAG_annotations.tsv", header=FALSE)  #Changed to the SGN human readable annotation
colnames(annotation1) <- c("ITAG", "SGN_annotation")
annotation2<- read.delim ("../../../06diffGeneExp/analysis/data/ITAG2.3_all_Arabidopsis_annotated.tsv")
annotation <- merge(annotation1,annotation2, by = "ITAG")
names(annotation)
#Only Gene Name and ITAG
annotation <- annotation[,c(1,5)]
annotation1<- read.delim("../../../06diffGeneExp/analysis/data/IT   AG2.3_all_Arabidopsis_ITAG_annotations.tsv", header=FALSE)  #Changed to the SGN human readable annotation
annotation1<- read.delim("../../../06diffGeneExp/analysis/data/ITAG2.3_all_Arabidopsis_ITAG_annotations.tsv", header=FALSE)  #Changed to the SGN human readable annotation
colnames(annotation1) <- c("ITAG", "SGN_annotation")
annotation2<- read.delim ("../../../06diffGeneExp/analysis/data/ITAG2.3_all_Arabidopsis_annotated.tsv")
annotation <- merge(annotation1,annotation2, by = "ITAG")
names(annotation)
#Only Gene Name and ITAG
annotation <- annotation[,c(1,5)]
y <- genesInClust(3, data.val2, annotation)
View(y)
genesInClust <- function(clustNum, data.val2, annotation) {
sub_cluster <- subset(data.val2, som$unit.classif==clustNum)
sub_data <- as.data.frame(sub_cluster[,1])
colnames(sub_data) <- "ITAG"
resultsTable <- merge(sub_data,annotation,by = "ITAG", all.x=TRUE)
print(nrow(unique(resultsTable)))
return(unique(resultsTable))
}
y <- genesInClust(4, data.val2, annotation)
View(y)
y <- genesInClust(4, data.val2, annotation)
head(y)
x <- genesInClust(4, data.val2, annotation)
head(x)
x <- genesInClust(7, data.val2, annotation)
head(x)
sub_cluster <- subset(data.val2, som$unit.classif==4)
sub_data <- as.data.frame(sub_cluster[,1])
colnames(sub_data) <- "ITAG"
resultsTable <- merge(sub_data,annotation,by = "ITAG", all.x=TRUE)
print(nrow(unique(resultsTable)))
return(unique(resultsTable))
head(resultsTable)
sub_cluster <- subset(data.val2, som$unit.classif==7)
sub_data <- as.data.frame(sub_cluster[,1])
colnames(sub_data) <- "ITAG"
resultsTable <- merge(sub_data,annotation,by = "ITAG", all.x=TRUE)
head(resultsTable)
View(resultsTable)
sub_cluster <- subset(data.val2, som$unit.classif==9)
head(sub_cluster)
sub_data <- as.data.frame(sub_cluster[,1])
head(sub_data)
colnames(sub_data) <- "ITAG"
resultsTable <- merge(sub_data,annotation,by = "ITAG", all.x=TRUE)
head(resultsTable) <- merge(sub_data,annotation,by = "ITAG", all.x=TRUE)
head(resultsTable)
sub_cluster <- subset(data.val2, som$unit.classif==10)
sub_data <- as.data.frame(sub_cluster[,1])
colnames(sub_data) <- "ITAG"
head(data.val2)
sub_cluster <- subset(data.val2, som$unit.classif==9)
head(sub_cluster)
sub_cluster <- subset(data.val2, som$unit.classif==10)
head(sub_cluster)
sub_data <- as.data.frame(sub_cluster[,1])
head(sub_data)
colnames(sub_data) <- "ITAG"
resultsTable <- merge(sub_data,annotation,by = "ITAG", all.x=TRUE)
head(resultsTable)
print(nrow(unique(resultsTable)))
View(resultsTable)
annotation
head(annotation)
annotation <- annotation[,c(1,5)]
names(annotation)
