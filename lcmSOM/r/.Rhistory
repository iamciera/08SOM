#Set type
m.genes25$type <- paste(m.genes25$region, m.genes25$tissue,  sep = "")
head(m.genes25)
m.genes25.sub <- m.genes25[,c(1,7,4,3)]
head(m.genes25.sub)
m.genes25.long <- cast(m.genes25.sub, genotype + gene ~ type, value.var = mean, fun.aggregate = "mean")
m.genes25.long <- as.data.frame(m.genes25.long)
wt <- subset(m.genes25.long, genotype == "wt")
tf2 <- subset(m.genes25.long, genotype == "tf2")
scale_data.wt <- as.matrix(t(scale(t(wt[c(3:8)]))))#transformation.
scale_data.tf2 <- as.matrix(t(scale(t(tf2[c(3:8)]))))#transformation.
scale_data <- rbind(scale_data.wt, scale_data.tf2)
summary(pca)
pca.scores <- data.frame(pca$x)
data.val <- cbind(m.genes25.long, scale_data, pca.scores)
dim(m.genes25.long)
dim(scale_data)
dim(pca.scores)
pca <- prcomp(scale_data, scale=TRUE)
scale_data <- rbind(scale_data.wt, scale_data.tf2)
colSums(is.na(scale_data))
new_DF_na2 <- subset(scale_data, is.na(scale_data$Cmbr))
cale_data <- as.dataframe(scale_data)
colSums(is.na(scale_data))
scale_data <- as.data.frame(scale_data)
colSums(is.na(scale_data))
new_DF_na2 <- subset(scale_data, is.na(scale_data$Cmbr))
new_DF_na2
genes25 <- read.csv("../data/analysis4.top25.csv")
#remove the trouble genes right away see below for testing
genes25 <- genes25[ !grepl("Solyc02g072330", genes25$gene) , ]
genes25 <- genes25[ !grepl("Solyc02g094130", genes25$gene) , ]
genes25 <- genes25[ !grepl("Solyc03g097920", genes25$gene) , ]
genes25 <- genes25[ !grepl("Solyc03g118310", genes25$gene) , ]
genes25 <- genes25[ !grepl("Solyc05g055530", genes25$gene) , ]
genes25 <- genes25[ !grepl("Solyc12g056600", genes25$gene) , ]
genes25 <- genes25[,c(2:14)]
m.genes25 <- melt(genes25)
head(m.genes25)
names(m.genes25) <- c("gene", "sample", "mean")
#set genotype
m.genes25$genotype <- ifelse(grepl("wt", m.genes25$sample, ignore.case = T), "wt",
ifelse(grepl("tf2", m.genes25$sample, ignore.case = T), "tf2", "unknown"))
#set tissue
m.genes25$tissue <- ifelse(grepl("other", m.genes25$sample, ignore.case = T), "other",
ifelse(grepl("mbr", m.genes25$sample, ignore.case = T), "mbr", "unknown"))
#Set Region
m.genes25$region <- ifelse(grepl("a", m.genes25$sample, ignore.case = T), "A",
ifelse(grepl("c", m.genes25$sample, ignore.case = T), "C", "B"))
#Set type
m.genes25$type <- paste(m.genes25$region, m.genes25$tissue,  sep = "")
m.genes25.sub <- m.genes25[,c(1,7,4,3)]
#Change from long to wide data format
m.genes25.long <- cast(m.genes25.sub, genotype + gene ~ type, value.var = mean, fun.aggregate = "mean")
m.genes25.long <- as.data.frame(m.genes25.long)
```
```{r}
wt <- subset(m.genes25.long, genotype == "wt")
tf2 <- subset(m.genes25.long, genotype == "tf2")
scale_data.wt <- as.matrix(t(scale(t(wt[c(3:8)]))))#transformation.
scale_data.tf2 <- as.matrix(t(scale(t(tf2[c(3:8)]))))#transformation.
scale_data <- rbind(scale_data.wt, scale_data.tf2)
pca <- prcomp(scale_data, scale=TRUE)
summary(pca)
pca.scores <- data.frame(pca$x)
data.val <- cbind(m.genes25.long, scale_data, pca.scores)
genes25 <- read.csv("../data/analysis4.top25.csv")
head(genes25)
genes25 <- genes25[,c(2:14)]
m.genes25 <- melt(genes25)
head(m.genes25)
names(m.genes25) <- c("gene", "sample", "mean")
m.genes25$genotype <- ifelse(grepl("wt", m.genes25$sample, ignore.case = T), "wt",
ifelse(grepl("tf2", m.genes25$sample, ignore.case = T), "tf2", "unknown"))
#set tissue
m.genes25$tissue <- ifelse(grepl("other", m.genes25$sample, ignore.case = T), "other",
ifelse(grepl("mbr", m.genes25$sample, ignore.case = T), "mbr", "unknown"))
#Set Region
m.genes25$region <- ifelse(grepl("a", m.genes25$sample, ignore.case = T), "A",
ifelse(grepl("c", m.genes25$sample, ignore.case = T), "C", "B"))
#Set type
m.genes25$type <- paste(m.genes25$region, m.genes25$tissue,  sep = "")
m.genes25.sub <- m.genes25[,c(1,7,4,3)]
m.genes25.long <- as.data.frame(m.genes25.long)
head(m.genes25.long)
genes25 <- read.csv("../data/analysis4.top25.csv")
genes25 <- genes25[,c(2:14)]
m.genes25 <- melt(genes25)
head(m.genes25)
names(m.genes25) <- c("gene", "sample", "mean")
#set genotype
m.genes25$genotype <- ifelse(grepl("wt", m.genes25$sample, ignore.case = T), "wt",
ifelse(grepl("tf2", m.genes25$sample, ignore.case = T), "tf2", "unknown"))
#set tissue
m.genes25$tissue <- ifelse(grepl("other", m.genes25$sample, ignore.case = T), "other",
ifelse(grepl("mbr", m.genes25$sample, ignore.case = T), "mbr", "unknown"))
#Set Region
m.genes25$region <- ifelse(grepl("a", m.genes25$sample, ignore.case = T), "A",
ifelse(grepl("c", m.genes25$sample, ignore.case = T), "C", "B"))
#Set type
m.genes25$type <- paste(m.genes25$region, m.genes25$tissue,  sep = "")
m.genes25.sub <- m.genes25[,c(1,7,4,3)]
m.genes25.long <- cast(m.genes25.sub, genotype + gene ~ type, value.var = mean, fun.aggregate = "mean")
m.genes25.long <- as.data.frame(m.genes25.long)
dim(m.genes25.long)
m.genes25.long <- m.genes25.long[ !grepl("Solyc02g072330", m.genes25.long$gene) , ]
m.genes25.long <- m.genes25.long[ !grepl("Solyc02g094130", m.genes25.long$gene) , ]
m.genes25.long <- m.genes25.long[ !grepl("Solyc03g097920", m.genes25.long$gene) , ]
m.genes25.long <- m.genes25.long[ !grepl("Solyc03g118310", m.genes25.long$gene) , ]
m.genes25.long <- m.genes25.long[ !grepl("Solyc05g055530", m.genes25.long$gene) , ]
m.genes25.long <- m.genes25.long[ !grepl("Solyc12g056600", m.genes25.long$gene) , ]
dim(m.genes25.long)
wt <- subset(m.genes25.long, genotype == "wt")
tf2 <- subset(m.genes25.long, genotype == "tf2")
scale_data.wt <- as.matrix(t(scale(t(wt[c(3:8)]))))#transformation.
scale_data.tf2 <- as.matrix(t(scale(t(tf2[c(3:8)]))))#transformation.
scale_data <- rbind(scale_data.wt, scale_data.tf2)
pca <- prcomp(scale_data, scale=TRUE)
pca <- prcomp(scale_data, scale=TRUE)
colSums(is.na(scale_data))
wt <- subset(m.genes25.long, genotype == "wt")
tf2 <- subset(m.genes25.long, genotype == "tf2")
head(tf2)
scale_data.wt <- as.matrix(t(scale(t(wt[c(3:8)]))))#transformation.
scale_data.tf2 <- as.matrix(t(scale(t(tf2[c(3:8)]))))#transformation.
scale_data <- rbind(scale_data.wt, scale_data.tf2)
scale_data <- as.data.frame(scale_data)
colSums(is.na(scale_data))
new_DF_na2 <- subset(scale_data, is.na(scale_data$Cmbr))
new_DF_na2
new_DF_na1 <- m.genes25.long[c(870,1173,1437,1565,2247,4523),]
new_DF_na1
#Super SOM
##Purpose
The purpose of this analysis is to make a superSOM.
```{r}
library(ggplot2)
library(reshape)
library(plyr)
library(kohonen)
```
##PCA
Upload that dataset:
```{r}
genes25 <- read.csv("../data/analysis4.top25.csv")
genes25 <- genes25[,c(2:14)]
m.genes25 <- melt(genes25)
head(m.genes25)
names(m.genes25) <- c("gene", "sample", "mean")
#set genotype
m.genes25$genotype <- ifelse(grepl("wt", m.genes25$sample, ignore.case = T), "wt",
ifelse(grepl("tf2", m.genes25$sample, ignore.case = T), "tf2", "unknown"))
#set tissue
m.genes25$tissue <- ifelse(grepl("other", m.genes25$sample, ignore.case = T), "other",
ifelse(grepl("mbr", m.genes25$sample, ignore.case = T), "mbr", "unknown"))
#Set Region
m.genes25$region <- ifelse(grepl("a", m.genes25$sample, ignore.case = T), "A",
ifelse(grepl("c", m.genes25$sample, ignore.case = T), "C", "B"))
#Set type
m.genes25$type <- paste(m.genes25$region, m.genes25$tissue,  sep = "")
m.genes25.sub <- m.genes25[,c(1,7,4,3)]
#Change from long to wide data format
m.genes25.long <- cast(m.genes25.sub, genotype + gene ~ type, value.var = mean, fun.aggregate = "mean")
m.genes25.long <- as.data.frame(m.genes25.long)
dim(m.genes25.long)
m.genes25.long <- m.genes25.long[ !grepl("Solyc02g072330", m.genes25.long$gene) , ]
m.genes25.long <- m.genes25.long[ !grepl("Solyc02g094130", m.genes25.long$gene) , ]
m.genes25.long <- m.genes25.long[ !grepl("Solyc03g097920", m.genes25.long$gene) , ]
m.genes25.long <- m.genes25.long[ !grepl("Solyc03g118310", m.genes25.long$gene) , ]
m.genes25.long <- m.genes25.long[ !grepl("Solyc05g055530", m.genes25.long$gene) , ]
m.genes25.long <- m.genes25.long[ !grepl("Solyc12g056600", m.genes25.long$gene) , ]
dim(m.genes25.long)
wt <- subset(m.genes25.long, genotype == "wt")
dim(wt)
9224 - 4612
tf2 <- subset(m.genes25.long, genotype == "tf2")
dim(tf2)
scale_data.wt <- as.matrix(t(scale(t(wt[c(3:8)]))))#transformation.
dim(scale_data.wt)
scale_data.tf2 <- as.matrix(t(scale(t(tf2[c(3:8)]))))#transformation.
dim(scale_data.tf2)
scale_data <- rbind(scale_data.wt, scale_data.tf2)
dim(scale_data)
pca <- prcomp(scale_data, scale=TRUE)
scale_data <- as.data.frame(scale_data)
dim(scale_data)
colSums(is.na(scale_data)) #there are six NAs in each column, double check where they came from.
library(ggplot2)
library(reshape)
library(plyr)
library(kohonen)
```
##PCA
Upload that dataset:
```{r}
genes25 <- read.csv("../data/analysis4.top25.csv")
head(genes25)
genes25 <- genes25[,c(2:14)]
m.genes25 <- melt(genes25)
head(m.genes25)
names(m.genes25) <- c("gene", "sample", "mean")
#set genotype
m.genes25$genotype <- ifelse(grepl("wt", m.genes25$sample, ignore.case = T), "wt",
ifelse(grepl("tf2", m.genes25$sample, ignore.case = T), "tf2", "unknown"))
#set tissue
m.genes25$tissue <- ifelse(grepl("other", m.genes25$sample, ignore.case = T), "other",
ifelse(grepl("mbr", m.genes25$sample, ignore.case = T), "mbr", "unknown"))
#Set Region
m.genes25$region <- ifelse(grepl("a", m.genes25$sample, ignore.case = T), "A",
ifelse(grepl("c", m.genes25$sample, ignore.case = T), "C", "B"))
#Set type
m.genes25$type <- paste(m.genes25$region, m.genes25$tissue,  sep = "")
head(m.genes25)
m.genes25.sub <- m.genes25[,c(1,7,4,3)]
head(m.genes25.sub)
#Change from long to wide data format
m.genes25.long <- cast(m.genes25.sub, genotype + gene ~ type, value.var = mean, fun.aggregate = "mean")
m.genes25.long <- as.data.frame(m.genes25.long)
m.genes25.long <- m.genes25.long[-c(870,1173,1437,1565,2247,4523),] #removing rows that caused NAs, see below for testing that was done.
```
```{r}
wt <- subset(m.genes25.long, genotype == "wt")
tf2 <- subset(m.genes25.long, genotype == "tf2")
scale_data.wt <- as.matrix(t(scale(t(wt[c(3:8)]))))#transformation.
scale_data.tf2 <- as.matrix(t(scale(t(tf2[c(3:8)]))))#transformation.
scale_data <- rbind(scale_data.wt, scale_data.tf2)
pca <- prcomp(scale_data, scale=TRUE)
summary(pca)
pca.scores <- data.frame(pca$x)
data.val <- cbind(m.genes25.long, scale_data, pca.scores)
p <- ggplot(data.val, aes(PC1, PC2))
p + geom_point(alpha = 0.5)
gene_names
new_DF_na1
tf2 <- subset(superSomData, genotype == "tf2", select = 3:8)
wt <- subset(superSomData, genotype == "wt", select = 3:8)
set.seed(6)
names(data.val)
superSomData <- data.val[,c(1:8)]
names(data.val)
superSomData <- data.val[,c(1:8)]
tf2 <- subset(superSomData, genotype == "tf2", select = 3:8)
wt <- subset(superSomData, genotype == "wt", select = 3:8)
wt <- as.matrix(wt)
tf2 <- as.matrix(tf2)
sc.wt <- t(scale(t(wt)))
sc.tf2 <- t(scale(t(tf2)))
all.data <- list(sc.wt,sc.tf2)
ssom <- supersom(all.data, somgrid(3, 2, "hexagonal"),weights=c(0.5,0.5))
dim(sc.wt)
dim(sc.tf2)
head(sc)
head(sc.wt)
tf2 <- subset(superSomData, genotype == "tf2", select = 1:8)
wt <- subset(superSomData, genotype == "wt", select = 1:8)
intersect(tf$gene, wt$gene)
intersect(tf2$gene, wt$gene)
?intersect
setdiff(tf2$gene, wt$gene)
setdiff(as.factor(tf2$gene), as.factor(wt$gene))
setdiff(wt$gene, tf2$gene)
dim(wt)
wt <- wt[-grep("Solyc02g072240.2.1", wt$gene),]
dim(wt)
wtdiff <- setdiff(wt$gene, tf2$gene) #find which genes differ
wtdiff <- setdiff(wt$gene, tf2$gene) #find which genes differ
wtdiff
tf2 <- subset(superSomData, genotype == "tf2", select = 1:8)
wt <- subset(superSomData, genotype == "wt", select = 1:8)
wtdiff <- setdiff(wt$gene, tf2$gene) #find which genes differ
for (GENE in wtdiff) {
wt <- wt[-grep(GENE, wt$gene),]
}
tf2 <- subset(superSomData, genotype == "tf2", select = 1:8)
wt <- subset(superSomData, genotype == "wt", select = 1:8)
wtdiff <- setdiff(wt$gene, tf2$gene) #find which genes differ
dim(wt)
for (GENE in wtdiff) {
wt <- wt[-grep(GENE, wt$gene),]
}
dim(wt)
wt <- as.matrix(wt)
tf2 <- as.matrix(tf2)
sc.wt <- t(scale(t(wt)))
sc.tf2 <- t(scale(t(tf2)))
all.data <- list(sc.wt,sc.tf2)
ssom <- supersom(all.data, somgrid(3, 2, "hexagonal"),weights=c(0.5,0.5))
dim(sc.tf2)
dim(sc.wt)
tf2 <- subset(superSomData, genotype == "tf2", select = 1:8)
wt <- subset(superSomData, genotype == "wt", select = 1:8)
wtdiff <- setdiff(wt$gene, tf2$gene) #find which genes differ
dim(wt)
for (GENE in wtdiff) {
wt <- wt[-grep(GENE, wt$gene),]
}
dim(wt)
wt <- as.matrix(wt)
dim(wt)
tf2 <- as.matrix(tf2)
dim(tf2)
sc.wt <- t(scale(t(wt)))
sc.wt <- t(scale(t(wt)))
sc.tf2 <- t(scale(t(tf2)))
head(wt)
tf2 <- subset(superSomData, genotype == "tf2", select = 3:8)
wt <- subset(superSomData, genotype == "wt", select = 3:8)
wt <- as.matrix(wt)
tf2 <- as.matrix(tf2)
sc.wt <- t(scale(t(wt)))
sc.tf2 <- t(scale(t(tf2)))
dim(sc.tf2)
dim(sc.wt)
superSomData <- data.val[,c(1:8)]
tf2 <- subset(superSomData, genotype == "tf2", select = 1:8)
wt <- subset(superSomData, genotype == "wt", select = 1:8)
wtdiff <- setdiff(wt$gene, tf2$gene) #find which genes differ
#remove them in WT
for (GENE in wtdiff) {
wt <- wt[-grep(GENE, wt$gene),]
}
tf2 <- tf2[,3:8]
wt <- wt[,3:8]
wt <- as.matrix(wt)
tf2 <- as.matrix(tf2)
sc.wt <- t(scale(t(wt)))
sc.tf2 <- t(scale(t(tf2)))
dim(sc.tf2)
dim(sc.wt)
all.data <- list(sc.wt,sc.tf2)
ssom <- supersom(all.data, somgrid(3, 2, "hexagonal"),weights=c(0.5,0.5))
summary(ssom)
par(mfrow = c(3, 2))
plot(ssom, type ="changes")
plot(ssom, type = "codes")
plot(ssom, type = "counts")
plot(ssom, type = "quality")
data.val <- cbind(data.val,ssom$unit.classif,ssom$distances)
plot.data <- read.table("../data/ssom.data.analysis5c.txt",header=TRUE)
names(plot.data)
dim(plot.data)
p <- ggplot(plot.data, aes(PC1, PC2, colour=factor(ssom.unit.classif)))
p + geom_point() + theme_bw()
library(VennDiagram)
library(ggplot2)
library(reshape)
library(kohonen)
library(goseq)
library(GO.db)
geneLength <- read.csv("../../../07GO_enrichment/requisiteData/normalized_genes_length.csv")
cate <- read.table("../../../07GO_enrichment/requisiteData/melted.GOTable.txt",header=TRUE)
plot.data <- read.table("../data/ssom.data.analysis5d.txt",header=TRUE)
names(plot.data)
clusterVis <- function(clustNum){
sub_cluster <- subset(plot.data, ssom.unit.classif==clustNum)
sub_data <- sub_cluster[,c(1, 9:14)] # just the sample types
m.data <- melt(sub_data)
p <- ggplot(m.data, aes(x=variable, y=value, color = genotype))
p + geom_point(alpha=0.5,position="jitter", size=1) +
geom_boxplot(alpha=0.75, outlier.size=0) +
theme_bw()
}
```
```{r}
clusterGO <- function(clustNum){
##GO Enrichment on the catergories
dev.off()
plot.new()
#we need to first get the data in the right format.
#First get the list of ITAG
#sub_cluster
sub_cluster <- subset(plot.data, ssom.unit.classif==clustNum)
itag.sc <- as.data.frame(sub_cluster$gene)
colnames(itag.sc)[1] <- "itag"
itag.sc$sc <- 1
#Since each orthologue between tf2 and wt are represented twice in this set, we have to keep only the unique ITAGs.
itag.sc <- unique(itag.sc) #Check. Should cut the list in half. # dim(itag.sc) before and after
#Merge all by itag
matrixGO <- merge(itag.sc, geneLength, by = "itag", all = TRUE)
matrixGO[is.na(matrixGO)] <- 0
pat <- matrixGO
#Now that we have the data in the right format we can proceed with GO enrichment.
genes = as.integer(pat[,"sc"])
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes,bias.data=pat$length)
GO.wall = goseq(pwf,gene2cat = cate)
head(GO.wall)
#This is going to correct for multiple testing.  You can specify the p-value cut-off of GO categories you are interested.
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
print(t) #this is for the knitr document
}
```
```{r}
clusterVis_line <- function(clustNum) {
sub_cluster <- subset(plot.data, ssom.unit.classif==clustNum)
sub_data <- sub_cluster[,c(1, 2, 9:14)] # just the sample types
sub_data <- melt(sub_data)
sub_data <- within(sub_data, lineGroup <- paste(genotype, gene,sep='.'))
ggplot(sub_data, aes(variable, value, group = lineGroup, color =  genotype )) +
geom_line(alpha = .1, (aes(color = factor(genotype)))) +
geom_point(alpha = .0)
}
```
```{r}
#Prereq annotation files for function
annotation1<- read.delim("../../../06diffGeneExp/analysis/data/ITAG2.3_all_Arabidopsis_ITAG_annotations.tsv", header=FALSE)  #Changed to the SGN human readable annotation
colnames(annotation1) <- c("ITAG", "SGN_annotation")
annotation2<- read.delim ("../../../06diffGeneExp/analysis/data/ITAG2.3_all_Arabidopsis_annotated.tsv")
annotation <- merge(annotation1,annotation2, by = "ITAG")
#Only Gene Name and ITAG
annotation <- annotation[,c(1,5)]
```
Function
```{r}
genesInClust <- function(clustNum) {
sub_cluster <- subset(plot.data, ssom.unit.classif==clustNum)
sub_data <- as.data.frame(sub_cluster[,2])
colnames(sub_data) <- "ITAG"
resultsTable <- merge(sub_data,annotation,by = "ITAG", all.x=TRUE)
print(nrow(resultsTable))
#  return(resultsTable <- unique(resultsTable))
return(unique(resultsTable))
}
genesInClust <- function(clustNum, plot.data, annotation) {
sub_cluster <- subset(plot.data, ssom.unit.classif==clustNum)
sub_data <- as.data.frame(sub_cluster[,2])
colnames(sub_data) <- "ITAG"
resultsTable <- merge(sub_data,annotation,by = "ITAG", all.x=TRUE)
print(nrow(unique(resultsTable)))
return(unique(resultsTable))
}
clusterVis(1)
clusterVis_line(1)
clusterGO(1)
clusterVis(2)
clusterVis_line(2)
clusterGO(2)
clusterVis_line(3)
clusterVis(3)
clusterVis(4)
clusterVis_line(4)
plot.data <- read.table("../data/ssom.data.analysis5d.txt",header=TRUE)
clusterVis_PCA <- function(clustNum) {
#make dataset for visualization
data.val3 <- data.val2
data.val3$cluster[data.val3[,20] == clustNum] <- "subcluster"
data.val3$cluster[data.val3[,20] != clustNum] <- "other"
#plot
p <- ggplot(data.val3, aes(PC1, PC2, color = cluster))
p + geom_point(size=I(2), alpha = 0.6) +
scale_colour_manual(values=c("#cccccc", "#000000")) +
theme_bw() +
theme(legend.text = element_text(
size = 16,
face = "bold"))
}
names(plot.data)
data.val3 <- head(plot.data)
data.val3 <- plot.data
names(data.val3)[21]
names(data.val3)[21] <- "cluster"
data.val3$cluster[data.val3[,20] == 1] <- "subcluster"
data.val3$cluster[data.val3[,20] != 1] <- "other"
names(data.val3)
p <- ggplot(data.val3, aes(PC1, PC2, color = cluster))
p + geom_point(size=I(2), alpha = 0.6) +
scale_colour_manual(values=c("#cccccc", "#000000")) +
theme_bw() +
theme(legend.text = element_text(
size = 16,
face = "bold"))
names(data.val3)[21] <- "cluster"
data.val3$cluster[data.val3[,21] == 1] <- "subcluster"
data.val3$cluster[data.val3[,21] != 1] <- "other"
#plot
p <- ggplot(data.val3, aes(PC1, PC2, color = cluster))
p + geom_point(size=I(2), alpha = 0.6) +
scale_colour_manual(values=c("#cccccc", "#000000")) +
theme_bw() +
theme(legend.text = element_text(
size = 16,
face = "bold"))
names(data.val3)[21] <- "cluster"
data.val3$cluster
data.val3 <- plot.data
names(data.val3) <- plot.data
data.val3 <- plot.data
names(data.val3) <- plot.data
names(data.val3)
plot.data <- read.table("../data/ssom.data.analysis5d.txt",header=TRUE)
data.val3 <- plot.data
names(data.val3)
data.val3$cluster[data.val3[,21] == 1] <- "subcluster"
data.val3$cluster[data.val3[,21] != 1] <- "other"
p <- ggplot(data.val3, aes(PC1, PC2, color = cluster))
p + geom_point(size=I(2), alpha = 0.6) +
scale_colour_manual(values=c("#cccccc", "#000000")) +
theme_bw() +
p <- ggplot(data.val3, aes(PC1, PC2, color = cluster))
p + geom_point(size=I(2), alpha = 0.6) +
scale_colour_manual(values=c("#cccccc", "#000000")) +
theme_bw() +
theme(legend.text = element_text(
size = 16,
face = "bold"))
